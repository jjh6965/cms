{"version":3,"file":"fileUtils-CySH9kI_.js","sources":["../../src/utils/fileUtils.js"],"sourcesContent":["const fileUtils = {\n  // 상수 정의 (환경 변수에서 가져오거나 디폴트값 사용)\n  _MAX_FILES: parseInt(import.meta.env.VITE_MAX_FILES, 10) || 5,\n  _MAX_FILE_SIZE: parseInt(import.meta.env.VITE_MAX_FILE_SIZE, 10) || 50 * 1024 * 1024, // 50MB\n  _ACCEPT: '*', // Default to all files\n\n  // MAX_FILES getter/setter\n  getMaxFiles() {\n    return this._MAX_FILES;\n  },\n  setMaxFiles(value) {\n    if (typeof value === 'number' && value > 0) {\n      this._MAX_FILES = value;\n    } else {\n      console.warn('MAX_FILES는 양수 숫자여야 합니다.');\n    }\n  },\n\n  // MAX_FILE_SIZE getter/setter\n  getMaxFileSize() {\n    return this._MAX_FILE_SIZE;\n  },\n  setMaxFileSize(value) {\n    if (typeof value === 'number' && value > 0) {\n      this._MAX_FILE_SIZE = value;\n    } else {\n      console.warn('MAX_FILE_SIZE는 양수 숫자여야 합니다.');\n    }\n  },\n\n  // ACCEPT getter/setter\n  getAccept() {\n    // Normalize accept values for browser compatibility\n    if (this._ACCEPT === 'text/*') {\n      return 'text/plain';\n    }\n    if (this._ACCEPT === 'document/*') {\n      return this.documentExtensions\n        .map(ext => this.mimeTypes[ext])\n        .filter(mime => mime)\n        .join(',');\n    }\n    return this._ACCEPT;\n  },\n  setAccept(value) {\n    if (typeof value === 'string' && value.trim()) {\n      const normalizedValue = value.trim().toLowerCase();\n      // Map common wildcards to supported MIME types\n      if (normalizedValue === 'image/*') {\n        this._ACCEPT = this.imageExtensions\n          .map(ext => this.mimeTypes[ext])\n          .filter(mime => mime)\n          .join(',');\n      } else if (normalizedValue === 'video/*') {\n        this._ACCEPT = this.videoExtensions\n          .map(ext => this.mimeTypes[ext])\n          .filter(mime => mime)\n          .join(',');\n      } else if (normalizedValue === 'audio/*') {\n        this._ACCEPT = this.audioExtensions\n          .map(ext => this.mimeTypes[ext])\n          .filter(mime => mime)\n          .join(',');\n      } else if (normalizedValue === 'text/*') {\n        this._ACCEPT = this.textExtensions\n          .map(ext => this.mimeTypes[ext])\n          .filter(mime => mime)\n          .join(',');\n      } else if (normalizedValue === 'document/*') {\n        this._ACCEPT = 'document/*'; // Store as document/*, normalize in getAccept\n      } else if (normalizedValue === '*' || normalizedValue === '*/*') {\n        this._ACCEPT = '*';\n      } else {\n        this._ACCEPT = normalizedValue;\n      }\n    } else if (Array.isArray(value) && value.length > 0) {\n      // Convert array of extensions to MIME types\n      const mimeTypes = value\n        .map(ext => this.mimeTypes[ext.toLowerCase()])\n        .filter(mime => mime)\n        .join(',');\n      this._ACCEPT = mimeTypes || '*';\n    } else {\n      console.warn('ACCEPT는 유효한 문자열 또는 확장자 배열이어야 합니다.');\n      this._ACCEPT = '*';\n    }\n  },\n\n  // Validate file against current accept setting\n  isValidFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    const mimeType = this.mimeTypes[extension];\n\n    if (this._ACCEPT === '*') {\n      return true;\n    }\n\n    // Check if file matches the accept MIME types\n    const acceptTypes = this._ACCEPT.split(',').map(type => type.trim());\n    if (acceptTypes.includes(mimeType)) {\n      return true;\n    }\n\n    // Handle wildcard cases\n    if (this._ACCEPT === 'document/*' && this.isDocumentFile(file)) {\n      return true;\n    }\n    if (acceptTypes.some(type => type === 'image/*' && this.isImageFile(file))) {\n      return true;\n    }\n    if (acceptTypes.some(type => type === 'video/*' && this.isVideoFile(file))) {\n      return true;\n    }\n    if (acceptTypes.some(type => type === 'audio/*' && this.isAudioFile(file))) {\n      return true;\n    }\n    if (acceptTypes.some(type => type === 'text/plain' && this.isTextFile(file))) {\n      return true;\n    }\n\n    return false;\n  },\n\n  // MIME 타입 매핑\n  mimeTypes: {\n    // 이미지 파일\n    jpg: 'image/jpeg',\n    jpeg: 'image/jpeg',\n    png: 'image/png',\n    gif: 'image/gif',\n    svg: 'image/svg+xml',\n    bmp: 'image/bmp',\n    webp: 'image/webp',\n    // ZIP 및 압축 파일\n    zip: 'application/zip',\n    rar: 'application/x-rar-compressed',\n    '7z': 'application/x-7z-compressed',\n    tar: 'application/x-tar',\n    gz: 'application/gzip',\n    // 동영상 파일\n    mp4: 'video/mp4',\n    mpeg: 'video/mpeg',\n    mov: 'video/quicktime',\n    avi: 'video/x-msvideo',\n    wmv: 'video/x-ms-wmv',\n    flv: 'video/x-flv',\n    webm: 'video/webm',\n    // 오디오 파일\n    mp3: 'audio/mpeg',\n    wav: 'audio/wav',\n    ogg: 'audio/ogg',\n    aac: 'audio/aac',\n    flac: 'audio/flac',\n    // 문서 파일\n    pdf: 'application/pdf',\n    doc: 'application/msword',\n    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    xls: 'application/vnd.ms-excel',\n    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    ppt: 'application/vnd.ms-powerpoint',\n    pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    txt: 'text/plain',\n    log: 'text/plain',\n  },\n\n  // 파일 확장자 리스트\n  imageExtensions: ['jpg', 'jpeg', 'png', 'gif', 'svg', 'bmp', 'webp'],\n  zipExtensions: ['zip', 'rar', '7z', 'tar', 'gz'],\n  videoExtensions: ['mp4', 'mpeg', 'mov', 'avi', 'wmv', 'flv', 'webm'],\n  audioExtensions: ['mp3', 'wav', 'ogg', 'aac', 'flac'],\n  textExtensions: ['txt', 'log'],\n  documentExtensions: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'],\n\n  // 파일 크기 포맷팅 (KB, MB 등으로 변환)\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n\n  // 파일 확장자 추출\n  getFileExtension(fileName) {\n    return fileName.split('.').pop().toLowerCase();\n  },\n\n  // 이미지 파일 여부 체크\n  isImageFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.imageExtensions.includes(extension);\n  },\n\n  // ZIP 파일 여부 체크\n  isZipFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.zipExtensions.includes(extension);\n  },\n\n  // 동영상 파일 여부 체크\n  isVideoFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.videoExtensions.includes(extension);\n  },\n\n  // 오디오 파일 여부 체크\n  isAudioFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.audioExtensions.includes(extension);\n  },\n\n  // 텍스트 파일 여부 체크\n  isTextFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.textExtensions.includes(extension);\n  },\n\n  // 문서 파일 여부 체크\n  isDocumentFile(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    return this.documentExtensions.includes(extension);\n  },\n\n  // 파일 타입에 따른 Bootstrap 아이콘 반환\n  getFileIcon(file) {\n    const extension = this.getFileExtension(file.fileName || file.name);\n    if (this.imageExtensions.includes(extension)) {\n      return 'bi-image';\n    } else if (this.zipExtensions.includes(extension)) {\n      return 'bi-file-earmark-zip';\n    } else if (this.videoExtensions.includes(extension)) {\n      return 'bi-camera-video';\n    } else if (this.audioExtensions.includes(extension)) {\n      return 'bi-music-note';\n    } else if (extension === 'pdf') {\n      return 'bi-file-earmark-pdf';\n    } else if (['doc', 'docx'].includes(extension)) {\n      return 'bi-file-earmark-word';\n    } else if (['xls', 'xlsx'].includes(extension)) {\n      return 'bi-file-earmark-excel';\n    } else if (['ppt', 'pptx'].includes(extension)) {\n      return 'bi-file-earmark-slides';\n    } else if (this.textExtensions.includes(extension)) {\n      return 'bi-file-earmark-text';\n    } else {\n      return 'bi-file-earmark';\n    }\n  },\n\n  // Base64 문자열을 UTF-8 텍스트로 디코딩\n  decodeBase64ToText(base64String) {\n    try {\n      const decodedData = atob(base64String);\n      return decodeURIComponent(escape(decodedData));\n    } catch (error) {\n      console.error('Error decoding base64 to text:', error);\n      throw new Error('텍스트 파일을 디코딩하는 중 오류가 발생했습니다.');\n    }\n  },\n\n  // UTF-8 텍스트를 Base64 문자열로 인코딩\n  encodeTextToBase64(text) {\n    try {\n      const encodedData = unescape(encodeURIComponent(text));\n      return btoa(encodedData);\n    } catch (error) {\n      console.error('Error encoding text to base64:', error);\n      throw new Error('텍스트를 Base64로 인코딩하는 중 오류가 발생했습니다.');\n    }\n  },\n};\n\nexport default fileUtils;"],"names":["fileUtils","value","ext","mime","normalizedValue","mimeTypes","file","extension","mimeType","acceptTypes","type","bytes","k","sizes","i","fileName","base64String","decodedData","error","text","encodedData"],"mappings":"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"}