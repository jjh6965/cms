{"version":3,"file":"TabulatorDirect-CYTpFe5w.js","sources":["../../src/pages/sample/TabulatorDirect.jsx"],"sourcesContent":["  import React, { useState, useEffect, useRef } from 'react';\n  import { fetchJsonData } from '../../utils/dataUtils';\n  import { createTable } from '../../utils/tableConfig';\n  import { initialFilters } from '../../utils/tableEvent';\n  import { handleDownloadExcel } from '../../utils/tableExcel';\n  import MainSearch from '../../components/main/MainSearch';\n  import TableSearch from '../../components/table/TableSearch';\n  import CommonPopup from '../../components/popup/CommonPopup';\n  import styles from '../../components/table/TableSearch.module.css';\n  import sampleData from '../../data/data.json';\n\n  /**\n   * 필드 옵션 데이터를 반환   \n   * @param {string} fieldId - 필드 식별자\n   * @param {string} dependentValue - 의존 값\n   * @returns {Array} 옵션 배열\n   */\n  const getFieldOptions = (fieldId, dependentValue = '') => {\n    console.log('AAA');\n    const optionsMap = {\n      status: [\n        { value: '', label: '전체' },\n        { value: 'active', label: '활성' },\n        { value: 'inactive', label: '비활성' },\n      ],\n      org1: [\n        { value: '', label: '전체' },\n        { value: 'org1', label: '강남본부' },\n        { value: 'org2', label: '강북본부' },\n      ],\n      org2: dependentValue === 'org2' ? [\n        { value: '', label: '전체' },\n        { value: 'org21', label: '테스트지사' },\n        { value: 'org22', label: '강북지사' },\n        { value: 'org23', label: '하남지사' },\n      ] : [{ value: '', label: '전체' }],\n      org3: dependentValue === 'org22' ? [\n        { value: '', label: '전체' },\n        { value: 'org221', label: '노원지점' },\n        { value: 'org222', label: '성동지점' },\n        { value: 'org223', label: '테스트지점' },\n      ] : [{ value: '', label: '전체' }],\n      role: [\n        { value: 'admin', label: '관리자' },\n        { value: 'user', label: '사용자' },\n      ],\n      filterSelect: [\n        { value: '', label: '선택' },\n        { value: 'name', label: '이름' },\n        { value: 'age', label: '나이' },\n        { value: 'status', label: '상태' },\n      ],\n      orgSelect: [\n        { value: '', label: '선택' },\n        { value: 'A0001', label: '강남본부' },\n        { value: 'A0002', label: '강북본부' },\n      ],\n    };\n    return optionsMap[fieldId] || [];\n  };\n\n  /**\n   * 조직 선택 팝업 컨텐츠 컴포넌트\n   * @param {Object} props - 컴포넌트 속성\n   * @param {string} initialOrg - 초기 조직 값\n   * @param {Function} onSelect - 선택 시 호출되는 콜백\n   * @returns {JSX.Element} 드롭다운 컨텐츠\n   */\n  const OrgSelectContent = ({ initialOrg, onSelect }) => {\n    const [selectedOrg, setSelectedOrg] = useState(initialOrg);\n\n    useEffect(() => {\n      setSelectedOrg(initialOrg); // 초기값 변경 시 업데이트\n    }, [initialOrg]);\n\n    return (\n      <div>\n        <label htmlFor=\"orgSelect\">조직 선택: </label>\n        <select\n          id=\"orgSelect\"\n          value={selectedOrg}\n          onChange={(e) => {\n            setSelectedOrg(e.target.value);\n            onSelect(e.target.value);\n          }}\n        >\n          {getFieldOptions('orgSelect').map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  };\n\n  /**\n   * 테이블 및 검색 기능 컴포넌트\n   * @returns {JSX.Element} 검색 폼과 테이블을 포함한 컴포넌트\n   */\n  const TabulatorDirect = () => {\n    const [showPopup, setShowPopup] = useState(false);\n    const [popupTitle, setPopupTitle] = useState('');\n    const [popupContent, setPopupContent] = useState(null);\n    const [popupOnConfirm, setPopupOnConfirm] = useState(null);\n    const [selectedOrg, setSelectedOrg] = useState(''); // 조직 선택 팝업용 상태\n    const [status2Options, setStatus2Options] = useState(getFieldOptions('org2'));\n    const [status3Options, setStatus3Options] = useState(getFieldOptions('org3'));\n    const selectedOrgRef = useRef(selectedOrg); // 최신 selectedOrg 값을 추적\n\n    // selectedOrg 변경 시 ref 업데이트\n    useEffect(() => {\n      selectedOrgRef.current = selectedOrg;\n    }, [selectedOrg]);\n\n    // 오늘 날짜 및 월 설정\n    const today = new Date();\n    const todayDate = today.toISOString().split('T')[0];\n    const todayMonth = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}`;\n\n    // 검색 및 버튼 구성\n    // TODO: searchConfig는 MainSearch 컴포넌트에서 동적으로 검색 폼과 버튼을 렌더링하기 위한 설정 객체입니다. 아래는 각 속성의 사용법과 동작에 대한 설명입니다:\n    // - id: 필드의 고유 식별자로, 필터 객체(filters)에서 해당 필드의 값을 참조하는 키로 사용됩니다. 예: 'name'은 filters.name으로 값을 저장합니다. 필수 속성이며, 중복되지 않아야 합니다.\n    // - type: 렌더링할 입력 요소의 유형을 지정합니다. MainSearch에서 다음 유형을 지원합니다:\n    //   - 'text': 텍스트 입력 필드(<input type=\"text\">). 입력값은 maxLength로 제한됩니다.\n    //   - 'textarea': 텍스트 영역(<textarea>). maxLength로 입력 제한.\n    //   - 'select': 드롭다운 메뉴(<select>). options 속성으로 선택 항목 지정.\n    //   - 'day', 'startday', 'endday': 단일 날짜 선택 필드(DatePickerCommon 사용). 'startday'와 'endday'는 각각 기간의 시작/종료 날짜로, 상호 제약 조건 적용.\n    //   - 'startmonth', 'endmonth': 월 선택 필드. 'startmonth'와 'endmonth'는 기간의 시작/종료 월로, 상호 제약 조건 적용.\n    //   - 'dayperiod', 'monthperiod': 날짜 또는 월 범위 선택 필드. { start, end } 객체로 값을 저장.\n    //   - 'checkbox': 체크박스(<input type=\"checkbox\">). true/false 값 저장.\n    //   - 'radio': 라디오 버튼 그룹. options 속성으로 선택 항목 지정.\n    //   - 'popupIcon': 팝업을 여는 버튼(예: '+'). eventType 속성으로 클릭 시 동작 정의.\n    //   - 'button': 일반 버튼. eventType 속성으로 클릭 시 동작 정의.\n    // - row: 필드 또는 버튼이 표시될 행 번호(정수, 기본값 1). 같은 row 값을 가진 요소는 같은 행에 배치됩니다.\n    // - label: 입력 요소 또는 버튼 옆에 표시되는 라벨 텍스트. 예: '이름'은 필드 옆에 \"이름:\"으로 표시됩니다.\n    // - labelVisible: 라벨 표시 여부(boolean). true(기본값)면 라벨 표시, false면 숨김.\n    // - placeholder: 입력 필드('text', 'textarea', 'day', 'startday', 'endday', 'startmonth', 'endmonth', 'dayperiod', 'monthperiod')에 표시되는 플레이스홀더 텍스트. 미설정 시 빈 문자열 또는 label 값 사용.\n    // - maxLength: 'text' 또는 'textarea'의 최대 입력 문자 수(기본값 255). 입력 초과 시 common.validateVarcharLength를 통해 에러 팝업 표시.\n    // - options: 'select' 또는 'radio' 타입에서 선택 항목 배열. 예: [{ value: 'active', label: '활성' }]. getFieldOptions 함수로 동적으로 제공.\n    // - eventType: 'popupIcon' 또는 'button' 타입에서 클릭 시 발생하는 이벤트 이름. 예: 'showOrgPopup'은 조직 선택 팝업을 엽니다.\n    // - width: 요소의 너비(예: '200px'). 'default' 또는 미설정 시 defaultStyles.width('150px') 적용. 버튼은 기본값 '80px'.\n    // - height: 요소의 높이(예: '30px'). 'default' 또는 미설정 시 defaultStyles.height('30px') 적용.\n    // - backgroundColor: 요소의 배경색(예: '#ffffff'). 'default' 또는 미설정 시 defaultStyles.backgroundColor('#ffffff') 적용. 버튼은 기본값 '#00c4b4'.\n    // - color: 요소의 글자색(예: '#000000'). 'default' 또는 미설정 시 defaultStyles.color('#000000') 적용. 버튼은 기본값 '#ffffff'.\n    // - enabled: 요소 활성화 여부(boolean). true(기본값)면 입력/클릭 가능, false면 비활성화(disabled).\n    // - defaultValue: 초기값 설정. 'day', 'startday', 'endday'는 날짜 문자열(예: '2025-05-31'), 'startmonth', 'endmonth'는 월 문자열(예: '2025-05'), 'dayperiod', 'monthperiod'는 { start, end } 객체. 미설정 시 오늘 날짜/월 적용.\n    const searchConfig = {\n      areas: [\n        {\n          type: 'search',\n          fields: [\n            { id: 'name', type: 'text', row: 1, label: '이름', labelVisible: true, placeholder: '이름 검색', maxLength: 50, width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true },\n            { id: 'status', type: 'select', row: 1, label: '상태', labelVisible: true, options: getFieldOptions('status'), width: '150px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true },\n            { id: 'orgText', type: 'text', row: 2, label: '조직예제', labelVisible: true, placeholder: '조직 선택', width: '150px', height: '30px', backgroundColor: '#f0f0f0', color: '#000000', enabled: false },\n            { id: 'orgPopupBtn', type: 'popupIcon', row: 2, label: '조직 선택', labelVisible: false, eventType: 'showOrgPopup', width: '30px', height: '30px', backgroundColor: '#f0f0f0', color: '#000000', enabled: true },\n            { id: 'testSearchBtn', type: 'button', row: 2, label: '버튼', labelVisible: false, eventType: 'testSearch', width: '80px', height: '30px', backgroundColor: '#00c4b4', color: '#ffffff', enabled: true },\n            { id: 'status1', type: 'select', row: 3, label: '드롭리스트예제', labelVisible: true, options: getFieldOptions('org1'), width: '150px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true },\n            { id: 'status2', type: 'select', row: 3, label: '드롭리스트예제', labelVisible: false, options: status2Options, width: '150px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true },\n            { id: 'status3', type: 'select', row: 3, label: '드롭리스트예제', labelVisible: false, options: status3Options, width: '150px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true },\n            { id: 'createdDate', type: 'day', row: 4, label: '일자예제', labelVisible: true, placeholder: '날짜 선택', width: '140px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: todayDate },\n            { id: 'rangeStartDate', type: 'startday', row: 5, label: '기간(일자)예제', labelVisible: true, placeholder: '시작일 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: todayDate },\n            { id: 'rangeEndDate', type: 'endday', row: 5, label: ' ~ ', labelVisible: true, placeholder: '종료일 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: todayDate },\n            { id: 'rangeStartMonth', type: 'startmonth', row: 5, label: '기간(월)예제', labelVisible: true, placeholder: '시작월 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: todayMonth },\n            { id: 'rangeEndMonth', type: 'endmonth', row: 5, label: ' ~ ', labelVisible: true, placeholder: '종료월 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: todayMonth },\n            { id: 'dayPeriod', type: 'dayperiod', row: 6, label: '날짜범위 예제', labelVisible: true, placeholder: '날짜 범위 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: { start: todayDate, end: todayDate } },\n            { id: 'monthPeriod', type: 'monthperiod', row: 6, label: '월범위 예제', labelVisible: true, placeholder: '월 범위 선택', width: '200px', height: '30px', backgroundColor: '#ffffff', color: '#000000', enabled: true, defaultValue: { start: todayMonth, end: todayMonth } },\n            { id: 'isActive', type: 'checkbox', row: 7, label: '체크박스 예제', labelVisible: true, width: 'default', height: 'default', backgroundColor: 'default', color: 'default', enabled: true },\n            { id: 'role', type: 'radio', row: 8, label: '라디오버튼 예제', labelVisible: true, options: getFieldOptions('role'), width: 'default', height: 'default', backgroundColor: 'default', color: 'default', enabled: true },\n          ],\n        },\n        {\n          type: 'buttons',\n          fields: [\n            { id: 'searchBtn', type: 'button', row: 1, label: '검색', eventType: 'search', width: '80px', height: '30px', backgroundColor: '#00c4b4', color: '#ffffff', enabled: true },\n            { id: 'resetBtn', type: 'button', row: 8, label: '초기화', eventType: 'reset', width: '80px', height: '30px', backgroundColor: '#00c4b4', color: '#ffffff', enabled: true },\n            { id: 'popupBtn2', type: 'button', row: '8', label: '팝업 버튼', eventType: 'showPopup', width: '100px', height: '30px', backgroundColor: '#00c4b4', color: '#ffffff', enabled: true },\n          ],\n        },\n      ],\n    };\n\n    const filterTableFields = [\n      { id: 'filterSelect', type: 'select', label: '', options: getFieldOptions('filterSelect'), width: 'default', height: 'default', backgroundColor: 'default', color: 'default', enabled: true },\n      { id: 'filterText', type: 'text', label: '', placeholder: '찾을 내용을 입력하세요', width: 'default', height: 'default', backgroundColor: 'default', color: 'default', enabled: true },\n    ];\n\n    const [filters, setFilters] = useState(initialFilters(searchConfig.areas.find((area) => area.type === 'search').fields));\n    const [tableFilters, setTableFilters] = useState(initialFilters(filterTableFields));\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [isSearched, setIsSearched] = useState(false);\n    const [tableStatus, setTableStatus] = useState('initializing');\n    const [error, setError] = useState(null);\n    const [rowCount, setRowCount] = useState(0);\n    const tableRef = useRef(null);\n    const tableInstance = useRef(null);\n    const isInitialRender = useRef(true);\n    const latestFiltersRef = useRef(filters);\n\n    // 최신 필터를 ref에 유지하여 비동기 상태 문제를 방지\n    useEffect(() => {\n      latestFiltersRef.current = filters;\n    }, [filters]);\n\n    // 테이블 컬럼 정의\n    const columns = [\n      { title: 'ID', field: 'id', width: 80, headerHozAlign: 'center', hozAlign: 'center' },\n      { title: '이름', field: 'name', width: 150, headerHozAlign: 'center', hozAlign: 'left' },\n      { title: '나이', field: 'age', sorter: 'number', headerHozAlign: 'center', hozAlign: 'right' },\n      { title: '상태', field: 'status', headerHozAlign: 'center', hozAlign: 'left' },\n    ];\n\n    // 데이터 로드 함수\n    /**\n     * JSON 데이터를 가져오고 클라이언트 측에서 필터링하여 테이블 데이터를 로드\n     * @async\n     */\n    const loadData = async () => {\n      setLoading(true);\n      setIsSearched(true);\n      setError(null);\n\n      // 상태 업데이트 대기\n      await new Promise((resolve) => setTimeout(resolve, 0));\n\n      // 최신 필터 사용\n      const currentFilters = latestFiltersRef.current;\n\n      const params = {\n        name: currentFilters.name || '',\n        status: currentFilters.status || '',\n      };\n\n      // API 통신 전환 시 이 부분들을 수정하면된다. fetchData()\n      try {\n        const result = await fetchJsonData(sampleData, params);\n\n        // 데이터를 배열로 정규화\n        const dataArray = Array.isArray(result) ? result : [result];\n\n        // 클라이언트 측 필터링 적용\n        const filteredData = dataArray.filter(item =>\n          (!params.name || item.name === params.name) &&\n          (!params.status || item.status === params.status)\n        );\n\n        setData(filteredData);\n      } catch (err) {\n        setData([]);\n        setError('데이터 로드 실패: ' + err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // 동적 이벤트 처리\n    /**\n     * 검색, 초기화, 팝업 등 다양한 이벤트를 처리\n     * @param {string} eventType - 이벤트 유형\n     * @param {Object} eventData - 이벤트 데이터\n     */\n    const handleDynamicEvent = (eventType, eventData) => {\n      if (eventType === 'search') {\n        loadData();\n      } else if (eventType === 'reset') {\n        setFilters(initialFilters(searchConfig.areas.find((area) => area.type === 'search').fields));\n        setData([]);\n        setIsSearched(false);\n        setSelectedOrg('');\n        setStatus2Options(getFieldOptions('org2'));\n        setStatus3Options(getFieldOptions('org3'));\n      } else if (eventType === 'showPopup') {\n        setPopupTitle('팝업');\n        setPopupContent(`ID: ${eventData.id}에서 호출됨`);\n        setPopupOnConfirm(() => () => {\n          setShowPopup(false);\n          return true;\n        });\n        setShowPopup(true);\n      } else if (eventType === 'showOrgPopup') {\n        setPopupTitle('조직 선택');\n        setPopupContent(\n          <OrgSelectContent\n            initialOrg={selectedOrg}\n            onSelect={(value) => setSelectedOrg(value)}\n          />\n        );\n        setPopupOnConfirm(() => () => {\n          const currentSelectedOrg = selectedOrgRef.current;\n          if (currentSelectedOrg) {\n            const selectedOption = getFieldOptions('orgSelect').find(\n              (option) => option.value === currentSelectedOrg\n            );\n            console.log('Selected org value:', currentSelectedOrg);\n            setFilters((prev) => ({ ...prev, orgText: selectedOption ? selectedOption.label : '' }));\n          }\n          setShowPopup(false);\n          return true;\n        });\n        setShowPopup(true);\n      } else if (eventType === 'testSearch') {\n        setPopupTitle('테스트');\n        setPopupContent('테스트 버튼이 클릭되었습니다.');\n        setPopupOnConfirm(() => () => {\n          setShowPopup(false);\n          return true;\n        });\n        setShowPopup(true);\n      } else if (eventType === 'selectChange') {\n        const { id, value } = eventData;\n        if (id === 'status1') {\n          setStatus2Options(getFieldOptions('org2', value));\n          setStatus3Options(getFieldOptions('org3'));\n          setFilters((prev) => ({ ...prev, status2: '', status3: '' }));\n        } else if (id === 'status2') {\n          setStatus3Options(getFieldOptions('org3', value));\n          setFilters((prev) => ({ ...prev, status3: '' }));\n        }\n      }\n    };\n\n    // Tabulator 테이블 초기화\n    /**\n     * Tabulator 테이블을 초기화하고, 컴포넌트 언마운트 시 정리\n     * @async\n     */\n    useEffect(() => {\n      const initializeTable = async () => {\n        // 다른 컴포넌트 렌더링 대기\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        if (!tableRef.current) {\n          console.warn(\"테이블 컨테이너가 준비되지 않았습니다.\");\n          return;\n        }\n        try {\n          // Tabulator 테이블 생성\n          tableInstance.current = createTable(tableRef.current, columns, [], {});\n          if (!tableInstance.current) throw new Error(\"createTable returned undefined or null\");\n          setTableStatus(\"ready\");\n        } catch (err) {\n          setTableStatus(\"error\");\n          console.error(\"테이블 초기화 실패패:\", err.message);\n        }\n      };\n\n      initializeTable();\n\n      // 컴포넌트 언마운트 시 테이블 정리\n      return () => {\n        if (tableInstance.current) {\n          tableInstance.current.destroy();\n          tableInstance.current = null;\n          setTableStatus(\"initializing\");\n        }\n      };\n    }, []);\n\n    // 데이터 업데이트\n    /**\n     * 테이블 데이터를 업데이트하고, 검색 결과가 없으면 알림 표시\n     */\n    useEffect(() => {\n      if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return;\n      }\n      const table = tableInstance.current;\n      if (!table || tableStatus !== \"ready\" || loading) return;\n      if (table.rowManager?.renderer) {\n        table.setData(data);\n        if (isSearched && data.length === 0 && !loading) {\n          tableInstance.current.alert(\"검색 결과 없음\", \"info\");\n        } else {\n          tableInstance.current.clearAlert();\n          const rows = tableInstance.current.getDataCount();\n          setRowCount(rows);\n        }\n      } else {\n        console.warn(\"renderer가 아직 초기화되지 않았습니다.\");\n      }\n    }, [data, loading, tableStatus, isSearched]);\n\n    // 테이블 필터 업데이트\n    /**\n     * 테이블 필터를 동적으로 업데이트\n     */\n    useEffect(() => {\n      if (isInitialRender.current || !tableInstance.current || tableStatus !== \"ready\" || loading) return;\n      const { filterSelect, filterText } = tableFilters;\n      if (filterText && filterSelect) {\n        tableInstance.current.setFilter(filterSelect, \"like\", filterText);\n      } else if (filterText) {\n        if (filterText !== \"\") {\n          tableInstance.current.setFilter(\n            [\n              { field: \"MENUNM\", type: \"like\", value: filterText },\n              { field: \"URL\", type: \"like\", value: filterText },\n              { field: \"USEYN\", type: \"like\", value: filterText },\n            ],\n            \"or\"\n          );\n        } else {\n          tableInstance.current.clearFilter();\n        }\n      } else if (filterSelect) {\n        tableInstance.current.clearFilter();\n      }\n    }, [tableFilters.filterSelect, tableFilters.filterText, tableStatus, loading]);\n\n    return (\n      <div className={styles.container}>\n        <MainSearch\n          config={searchConfig}\n          filters={filters}\n          setFilters={setFilters}\n          onEvent={handleDynamicEvent}\n        />\n        <TableSearch\n          filterFields={filterTableFields}\n          filters={tableFilters}\n          setFilters={setTableFilters}\n          onDownloadExcel={() => handleDownloadExcel(tableInstance.current, tableStatus, '테스트.xlsx')}\n          rowCount={rowCount}\n          onEvent={handleDynamicEvent}\n        />\n        <div className={styles.tableWrapper}>\n          {tableStatus === 'initializing' && <div>초기화 중...</div>}\n          {loading && <div>로딩 중...</div>}\n          {error && <div>{error}</div>}\n          <div\n            ref={tableRef}\n            className={styles.tableSection}\n            style={{ visibility: loading || tableStatus !== 'ready' ? 'hidden' : 'visible' }}\n          />\n        </div>\n        <CommonPopup\n          show={showPopup}\n          onHide={() => setShowPopup(false)}\n          onConfirm={popupOnConfirm}\n          title={popupTitle}\n        >\n          {popupContent}\n        </CommonPopup>\n      </div>\n    );\n  };\n\n  export default TabulatorDirect;"],"names":["getFieldOptions","fieldId","dependentValue","OrgSelectContent","initialOrg","onSelect","selectedOrg","setSelectedOrg","useState","useEffect","jsx","e","option","TabulatorDirect","showPopup","setShowPopup","popupTitle","setPopupTitle","popupContent","setPopupContent","popupOnConfirm","setPopupOnConfirm","status2Options","setStatus2Options","status3Options","setStatus3Options","selectedOrgRef","useRef","today","todayDate","todayMonth","searchConfig","filterTableFields","filters","setFilters","initialFilters","area","tableFilters","setTableFilters","loading","setLoading","data","setData","isSearched","setIsSearched","tableStatus","setTableStatus","error","setError","rowCount","setRowCount","tableRef","tableInstance","isInitialRender","latestFiltersRef","columns","loadData","resolve","currentFilters","params","result","fetchJsonData","sampleData","filteredData","item","err","handleDynamicEvent","eventType","eventData","value","currentSelectedOrg","selectedOption","prev","id","createTable","table","_a","rows","filterSelect","filterText","jsxs","styles","MainSearch","TableSearch","handleDownloadExcel","CommonPopup"],"mappings":"q6FAiBQA,EAAkB,CAACC,EAASC,EAAiB,MACjD,QAAQ,IAAI,KAAK,EACE,CACjB,OAAQ,CACN,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,SAAU,MAAO,IAAA,EAC1B,CAAE,MAAO,WAAY,MAAO,KAAA,CAAM,EAEpC,KAAM,CACJ,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,OAAQ,MAAO,MAAA,EACxB,CAAE,MAAO,OAAQ,MAAO,MAAA,CAAO,EAEjC,KAAMA,IAAmB,OAAS,CAChC,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,QAAS,MAAO,OAAA,EACzB,CAAE,MAAO,QAAS,MAAO,MAAA,EACzB,CAAE,MAAO,QAAS,MAAO,MAAA,CAAO,EAC9B,CAAC,CAAE,MAAO,GAAI,MAAO,KAAM,EAC/B,KAAMA,IAAmB,QAAU,CACjC,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,SAAU,MAAO,MAAA,EAC1B,CAAE,MAAO,SAAU,MAAO,MAAA,EAC1B,CAAE,MAAO,SAAU,MAAO,OAAA,CAAQ,EAChC,CAAC,CAAE,MAAO,GAAI,MAAO,KAAM,EAC/B,KAAM,CACJ,CAAE,MAAO,QAAS,MAAO,KAAA,EACzB,CAAE,MAAO,OAAQ,MAAO,KAAA,CAAM,EAEhC,aAAc,CACZ,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,OAAQ,MAAO,IAAA,EACxB,CAAE,MAAO,MAAO,MAAO,IAAA,EACvB,CAAE,MAAO,SAAU,MAAO,IAAA,CAAK,EAEjC,UAAW,CACT,CAAE,MAAO,GAAI,MAAO,IAAA,EACpB,CAAE,MAAO,QAAS,MAAO,MAAA,EACzB,CAAE,MAAO,QAAS,MAAO,MAAA,CAAO,CAClC,EAEgBD,CAAO,GAAK,CAAA,GAU1BE,GAAmB,CAAC,CAAE,WAAAC,EAAY,SAAAC,KAAe,CACrD,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAASJ,CAAU,EAEzDK,OAAAA,EAAAA,UAAU,IAAM,CACdF,EAAeH,CAAU,CAC3B,EAAG,CAACA,CAAU,CAAC,SAGZ,MAAA,CACC,SAAA,CAAAM,EAAAA,IAAC,QAAA,CAAM,QAAQ,YAAY,SAAA,UAAO,EAClCA,EAAAA,IAAC,SAAA,CACC,GAAG,YACH,MAAOJ,EACP,SAAWK,GAAM,CACfJ,EAAeI,EAAE,OAAO,KAAK,EAC7BN,EAASM,EAAE,OAAO,KAAK,CACzB,EAEC,SAAAX,EAAgB,WAAW,EAAE,IAAKY,GACjCF,EAAAA,IAAC,SAAA,CAA0B,MAAOE,EAAO,MACtC,SAAAA,EAAO,KAAA,EADGA,EAAO,KAEpB,CACD,CAAA,CAAA,CACH,EACF,CAEJ,EAMMC,GAAkB,IAAM,CAC5B,KAAM,CAACC,EAAWC,CAAY,EAAIP,EAAAA,SAAS,EAAK,EAC1C,CAACQ,EAAYC,CAAa,EAAIT,EAAAA,SAAS,EAAE,EACzC,CAACU,EAAcC,CAAe,EAAIX,EAAAA,SAAS,IAAI,EAC/C,CAACY,EAAgBC,CAAiB,EAAIb,EAAAA,SAAS,IAAI,EACnD,CAACF,EAAaC,CAAc,EAAIC,EAAAA,SAAS,EAAE,EAC3C,CAACc,EAAgBC,CAAiB,EAAIf,EAAAA,SAASR,EAAgB,MAAM,CAAC,EACtE,CAACwB,EAAgBC,CAAiB,EAAIjB,EAAAA,SAASR,EAAgB,MAAM,CAAC,EACtE0B,EAAiBC,EAAAA,OAAOrB,CAAW,EAGzCG,EAAAA,UAAU,IAAM,CACdiB,EAAe,QAAUpB,CAC3B,EAAG,CAACA,CAAW,CAAC,EAGhB,MAAMsB,MAAY,KACZC,EAAYD,EAAM,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EAC5CE,EAAa,GAAGF,EAAM,YAAA,CAAa,KAAKA,EAAM,SAAA,EAAa,GAAG,SAAA,EAAW,SAAS,EAAG,GAAG,CAAC,GA6BzFG,EAAe,CACnB,MAAO,CACL,CACE,KAAM,SACN,OAAQ,CACN,CAAE,GAAI,OAAQ,KAAM,OAAQ,IAAK,EAAG,MAAO,KAAM,aAAc,GAAM,YAAa,QAAS,UAAW,GAAI,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACjM,CAAE,GAAI,SAAU,KAAM,SAAU,IAAK,EAAG,MAAO,KAAM,aAAc,GAAM,QAAS/B,EAAgB,QAAQ,EAAG,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACpM,CAAE,GAAI,UAAW,KAAM,OAAQ,IAAK,EAAG,MAAO,OAAQ,aAAc,GAAM,YAAa,QAAS,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACvL,CAAE,GAAI,cAAe,KAAM,YAAa,IAAK,EAAG,MAAO,QAAS,aAAc,GAAO,UAAW,eAAgB,MAAO,OAAQ,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACtM,CAAE,GAAI,gBAAiB,KAAM,SAAU,IAAK,EAAG,MAAO,KAAM,aAAc,GAAO,UAAW,aAAc,MAAO,OAAQ,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EAChM,CAAE,GAAI,UAAW,KAAM,SAAU,IAAK,EAAG,MAAO,UAAW,aAAc,GAAM,QAASA,EAAgB,MAAM,EAAG,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACxM,CAAE,GAAI,UAAW,KAAM,SAAU,IAAK,EAAG,MAAO,UAAW,aAAc,GAAO,QAASsB,EAAgB,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EAChM,CAAE,GAAI,UAAW,KAAM,SAAU,IAAK,EAAG,MAAO,UAAW,aAAc,GAAO,QAASE,EAAgB,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EAChM,CAAE,GAAI,cAAe,KAAM,MAAO,IAAK,EAAG,MAAO,OAAQ,aAAc,GAAM,YAAa,QAAS,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAcK,CAAA,EAC9M,CAAE,GAAI,iBAAkB,KAAM,WAAY,IAAK,EAAG,MAAO,WAAY,aAAc,GAAM,YAAa,SAAU,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAcA,CAAA,EAC3N,CAAE,GAAI,eAAgB,KAAM,SAAU,IAAK,EAAG,MAAO,MAAO,aAAc,GAAM,YAAa,SAAU,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAcA,CAAA,EAClN,CAAE,GAAI,kBAAmB,KAAM,aAAc,IAAK,EAAG,MAAO,UAAW,aAAc,GAAM,YAAa,SAAU,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAcC,CAAA,EAC7N,CAAE,GAAI,gBAAiB,KAAM,WAAY,IAAK,EAAG,MAAO,MAAO,aAAc,GAAM,YAAa,SAAU,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAcA,CAAA,EACrN,CAAE,GAAI,YAAa,KAAM,YAAa,IAAK,EAAG,MAAO,UAAW,aAAc,GAAM,YAAa,WAAY,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAc,CAAE,MAAOD,EAAW,IAAKA,EAAU,EAC3P,CAAE,GAAI,cAAe,KAAM,cAAe,IAAK,EAAG,MAAO,SAAU,aAAc,GAAM,YAAa,UAAW,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,GAAM,aAAc,CAAE,MAAOC,EAAY,IAAKA,EAAW,EAC/P,CAAE,GAAI,WAAY,KAAM,WAAY,IAAK,EAAG,MAAO,UAAW,aAAc,GAAM,MAAO,UAAW,OAAQ,UAAW,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EAC9K,CAAE,GAAI,OAAQ,KAAM,QAAS,IAAK,EAAG,MAAO,WAAY,aAAc,GAAM,QAAS9B,EAAgB,MAAM,EAAG,MAAO,UAAW,OAAQ,UAAW,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,CAAK,CACjN,EAEF,CACE,KAAM,UACN,OAAQ,CACN,CAAE,GAAI,YAAa,KAAM,SAAU,IAAK,EAAG,MAAO,KAAM,UAAW,SAAU,MAAO,OAAQ,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACnK,CAAE,GAAI,WAAY,KAAM,SAAU,IAAK,EAAG,MAAO,MAAO,UAAW,QAAS,MAAO,OAAQ,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EAClK,CAAE,GAAI,YAAa,KAAM,SAAU,IAAK,IAAK,MAAO,QAAS,UAAW,YAAa,MAAO,QAAS,OAAQ,OAAQ,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,CAAK,CACnL,CACF,CACF,EAGIgC,EAAoB,CACxB,CAAE,GAAI,eAAgB,KAAM,SAAU,MAAO,GAAI,QAAShC,EAAgB,cAAc,EAAG,MAAO,UAAW,OAAQ,UAAW,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,EACvL,CAAE,GAAI,aAAc,KAAM,OAAQ,MAAO,GAAI,YAAa,eAAgB,MAAO,UAAW,OAAQ,UAAW,gBAAiB,UAAW,MAAO,UAAW,QAAS,EAAA,CAAK,EAGvK,CAACiC,EAASC,CAAU,EAAI1B,EAAAA,SAAS2B,EAAeJ,EAAa,MAAM,KAAMK,GAASA,EAAK,OAAS,QAAQ,EAAE,MAAM,CAAC,EACjH,CAACC,EAAcC,CAAe,EAAI9B,EAAAA,SAAS2B,EAAeH,CAAiB,CAAC,EAC5E,CAACO,EAASC,CAAU,EAAIhC,EAAAA,SAAS,EAAK,EACtC,CAACiC,EAAMC,CAAO,EAAIlC,EAAAA,SAAS,CAAA,CAAE,EAC7B,CAACmC,EAAYC,CAAa,EAAIpC,EAAAA,SAAS,EAAK,EAC5C,CAACqC,EAAaC,CAAc,EAAItC,EAAAA,SAAS,cAAc,EACvD,CAACuC,EAAOC,CAAQ,EAAIxC,EAAAA,SAAS,IAAI,EACjC,CAACyC,EAAUC,CAAW,EAAI1C,EAAAA,SAAS,CAAC,EACpC2C,EAAWxB,EAAAA,OAAO,IAAI,EACtByB,EAAgBzB,EAAAA,OAAO,IAAI,EAC3B0B,EAAkB1B,EAAAA,OAAO,EAAI,EAC7B2B,EAAmB3B,EAAAA,OAAOM,CAAO,EAGvCxB,EAAAA,UAAU,IAAM,CACd6C,EAAiB,QAAUrB,CAC7B,EAAG,CAACA,CAAO,CAAC,EAGZ,MAAMsB,EAAU,CACd,CAAE,MAAO,KAAM,MAAO,KAAM,MAAO,GAAI,eAAgB,SAAU,SAAU,QAAA,EAC3E,CAAE,MAAO,KAAM,MAAO,OAAQ,MAAO,IAAK,eAAgB,SAAU,SAAU,MAAA,EAC9E,CAAE,MAAO,KAAM,MAAO,MAAO,OAAQ,SAAU,eAAgB,SAAU,SAAU,OAAA,EACnF,CAAE,MAAO,KAAM,MAAO,SAAU,eAAgB,SAAU,SAAU,MAAA,CAAO,EAQvEC,EAAW,SAAY,CAC3BhB,EAAW,EAAI,EACfI,EAAc,EAAI,EAClBI,EAAS,IAAI,EAGb,MAAM,IAAI,QAASS,GAAY,WAAWA,EAAS,CAAC,CAAC,EAGrD,MAAMC,EAAiBJ,EAAiB,QAElCK,EAAS,CACb,KAAMD,EAAe,MAAQ,GAC7B,OAAQA,EAAe,QAAU,EAAA,EAInC,GAAI,CACF,MAAME,EAAS,MAAMC,GAAcC,GAAYH,CAAM,EAM/CI,GAHY,MAAM,QAAQH,CAAM,EAAIA,EAAS,CAACA,CAAM,GAG3B,OAAOI,IACnC,CAACL,EAAO,MAAQK,EAAK,OAASL,EAAO,QACrC,CAACA,EAAO,QAAUK,EAAK,SAAWL,EAAO,OAAA,EAG5CjB,EAAQqB,CAAY,CACtB,OAASE,EAAK,CACZvB,EAAQ,CAAA,CAAE,EACVM,EAAS,cAAgBiB,EAAI,OAAO,CACtC,QAAA,CACEzB,EAAW,EAAK,CAClB,CACF,EAQM0B,EAAqB,CAACC,EAAWC,IAAc,CACnD,GAAID,IAAc,SAChBX,EAAA,UACSW,IAAc,QACvBjC,EAAWC,EAAeJ,EAAa,MAAM,KAAMK,GAASA,EAAK,OAAS,QAAQ,EAAE,MAAM,CAAC,EAC3FM,EAAQ,CAAA,CAAE,EACVE,EAAc,EAAK,EACnBrC,EAAe,EAAE,EACjBgB,EAAkBvB,EAAgB,MAAM,CAAC,EACzCyB,EAAkBzB,EAAgB,MAAM,CAAC,UAChCmE,IAAc,YACvBlD,EAAc,IAAI,EAClBE,EAAgB,OAAOiD,EAAU,EAAE,QAAQ,EAC3C/C,EAAkB,IAAM,KACtBN,EAAa,EAAK,EACX,GACR,EACDA,EAAa,EAAI,UACRoD,IAAc,eACvBlD,EAAc,OAAO,EACrBE,EACET,EAAAA,IAACP,GAAA,CACC,WAAYG,EACZ,SAAW+D,GAAU9D,EAAe8D,CAAK,CAAA,CAAA,CAC3C,EAEFhD,EAAkB,IAAM,IAAM,CAC5B,MAAMiD,EAAqB5C,EAAe,QAC1C,GAAI4C,EAAoB,CACtB,MAAMC,EAAiBvE,EAAgB,WAAW,EAAE,KACjDY,GAAWA,EAAO,QAAU0D,CAAA,EAE/B,QAAQ,IAAI,sBAAuBA,CAAkB,EACrDpC,EAAYsC,IAAU,CAAE,GAAGA,EAAM,QAASD,EAAiBA,EAAe,MAAQ,EAAA,EAAK,CACzF,CACA,OAAAxD,EAAa,EAAK,EACX,EACT,CAAC,EACDA,EAAa,EAAI,UACRoD,IAAc,aACvBlD,EAAc,KAAK,EACnBE,EAAgB,kBAAkB,EAClCE,EAAkB,IAAM,KACtBN,EAAa,EAAK,EACX,GACR,EACDA,EAAa,EAAI,UACRoD,IAAc,eAAgB,CACvC,KAAM,CAAE,GAAAM,EAAI,MAAAJ,CAAA,EAAUD,EAClBK,IAAO,WACTlD,EAAkBvB,EAAgB,OAAQqE,CAAK,CAAC,EAChD5C,EAAkBzB,EAAgB,MAAM,CAAC,EACzCkC,EAAYsC,IAAU,CAAE,GAAGA,EAAM,QAAS,GAAI,QAAS,EAAA,EAAK,GACnDC,IAAO,YAChBhD,EAAkBzB,EAAgB,OAAQqE,CAAK,CAAC,EAChDnC,EAAYsC,IAAU,CAAE,GAAGA,EAAM,QAAS,IAAK,EAEnD,CACF,EAOA/D,OAAAA,EAAAA,UAAU,MACgB,SAAY,CAGlC,GADA,MAAM,IAAI,QAASgD,GAAY,WAAWA,EAAS,GAAI,CAAC,EACpD,CAACN,EAAS,QAAS,CACrB,QAAQ,KAAK,uBAAuB,EACpC,MACF,CACA,GAAI,CAGF,GADAC,EAAc,QAAUsB,GAAYvB,EAAS,QAASI,EAAS,CAAA,EAAI,EAAE,EACjE,CAACH,EAAc,QAAS,MAAM,IAAI,MAAM,wCAAwC,EACpFN,EAAe,OAAO,CACxB,OAASmB,EAAK,CACZnB,EAAe,OAAO,EACtB,QAAQ,MAAM,eAAgBmB,EAAI,OAAO,CAC3C,CACF,GAEA,EAGO,IAAM,CACPb,EAAc,UAChBA,EAAc,QAAQ,QAAA,EACtBA,EAAc,QAAU,KACxBN,EAAe,cAAc,EAEjC,GACC,CAAA,CAAE,EAMLrC,EAAAA,UAAU,IAAM,OACd,GAAI4C,EAAgB,QAAS,CAC3BA,EAAgB,QAAU,GAC1B,MACF,CACA,MAAMsB,EAAQvB,EAAc,QAC5B,GAAI,GAACuB,GAAS9B,IAAgB,SAAWN,GACzC,IAAIqC,EAAAD,EAAM,aAAN,MAAAC,EAAkB,SAEpB,GADAD,EAAM,QAAQlC,CAAI,EACdE,GAAcF,EAAK,SAAW,GAAK,CAACF,EACtCa,EAAc,QAAQ,MAAM,WAAY,MAAM,MACzC,CACLA,EAAc,QAAQ,WAAA,EACtB,MAAMyB,EAAOzB,EAAc,QAAQ,aAAA,EACnCF,EAAY2B,CAAI,CAClB,MAEA,QAAQ,KAAK,2BAA2B,CAE5C,EAAG,CAACpC,EAAMF,EAASM,EAAaF,CAAU,CAAC,EAM3ClC,EAAAA,UAAU,IAAM,CACd,GAAI4C,EAAgB,SAAW,CAACD,EAAc,SAAWP,IAAgB,SAAWN,EAAS,OAC7F,KAAM,CAAE,aAAAuC,EAAc,WAAAC,CAAA,EAAe1C,EACjC0C,GAAcD,EAChB1B,EAAc,QAAQ,UAAU0B,EAAc,OAAQC,CAAU,EACvDA,EACLA,IAAe,GACjB3B,EAAc,QAAQ,UACpB,CACE,CAAE,MAAO,SAAU,KAAM,OAAQ,MAAO2B,CAAA,EACxC,CAAE,MAAO,MAAO,KAAM,OAAQ,MAAOA,CAAA,EACrC,CAAE,MAAO,QAAS,KAAM,OAAQ,MAAOA,CAAA,CAAW,EAEpD,IAAA,EAGF3B,EAAc,QAAQ,YAAA,EAEf0B,GACT1B,EAAc,QAAQ,YAAA,CAE1B,EAAG,CAACf,EAAa,aAAcA,EAAa,WAAYQ,EAAaN,CAAO,CAAC,EAG3EyC,EAAAA,KAAC,MAAA,CAAI,UAAWC,EAAO,UACrB,SAAA,CAAAvE,EAAAA,IAACwE,GAAA,CACC,OAAQnD,EACR,QAAAE,EACA,WAAAC,EACA,QAASgC,CAAA,CAAA,EAEXxD,EAAAA,IAACyE,GAAA,CACC,aAAcnD,EACd,QAASK,EACT,WAAYC,EACZ,gBAAiB,IAAM8C,GAAoBhC,EAAc,QAASP,EAAa,UAAU,EACzF,SAAAI,EACA,QAASiB,CAAA,CAAA,EAEXc,EAAAA,KAAC,MAAA,CAAI,UAAWC,EAAO,aACpB,SAAA,CAAApC,IAAgB,gBAAkBnC,EAAAA,IAAC,MAAA,CAAI,SAAA,WAAQ,EAC/C6B,GAAW7B,EAAAA,IAAC,MAAA,CAAI,SAAA,SAAA,CAAO,EACvBqC,GAASrC,EAAAA,IAAC,MAAA,CAAK,SAAAqC,CAAA,CAAM,EACtBrC,EAAAA,IAAC,MAAA,CACC,IAAKyC,EACL,UAAW8B,EAAO,aAClB,MAAO,CAAE,WAAY1C,GAAWM,IAAgB,QAAU,SAAW,SAAA,CAAU,CAAA,CACjF,EACF,EACAnC,EAAAA,IAAC2E,GAAA,CACC,KAAMvE,EACN,OAAQ,IAAMC,EAAa,EAAK,EAChC,UAAWK,EACX,MAAOJ,EAEN,SAAAE,CAAA,CAAA,CACH,EACF,CAEJ"}