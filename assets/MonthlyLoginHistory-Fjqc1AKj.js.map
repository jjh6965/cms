{"version":3,"file":"MonthlyLoginHistory-Fjqc1AKj.js","sources":["../../src/pages/oper/MonthlyLoginHistory.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { createTable } from \"../../utils/tableConfig\"; // Tabulator 테이블 생성 유틸\nimport { handleDownloadExcel } from \"../../utils/tableExcel\"; // 엑셀 다운로드 유틸\nimport CommonPopup from \"../../components/popup/CommonPopup\"; // 팝업 컴포넌트 (필요시)\nimport styles from \"./MonthlyLoginHistory.module.css\"; // 이 컴포넌트 전용 CSS 모듈\n\nconst MAX_RESULT_SIZE = 50; // 최대 결과 수\n\nconst MonthlyLoginHistory = () => {\n  const tableRef = useRef(null); // Tabulator 테이블 컨테이너 ref\n  const tableInstance = useRef(null); // Tabulator 인스턴스 ref\n  const [loading, setLoading] = useState(false); // 로딩 상태\n  const [error, setError] = useState(null); // 에러 상태\n  const [rowCount, setRowCount] = useState(0); // 총 행 수\n  const [tableStatus, setTableStatus] = useState(\"initializing\"); // 테이블 초기화 상태\n  const [displayData, setDisplayData] = useState([]); // 테이블에 표시될 데이터\n\n  // draw.io UI에 맞춰 기간(날짜) 필터 상태 추가\n  // 현재 날짜를 기반으로 초기값을 설정 (예: 오늘 날짜와 한 달 전)\n  const today = new Date();\n  const oneMonthAgo = new Date(today);\n  oneMonthAgo.setMonth(today.getMonth() - 1); // 현재 월에서 1개월 전으로 설정\n\n  // 날짜를 YYYY-MM-DD 형식의 문자열로 변환하는 헬퍼 함수\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작하므로 +1\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  const [startDate, setStartDate] = useState(formatDate(oneMonthAgo)); // 한 달 전 날짜로 초기값 설정\n  const [endDate, setEndDate] = useState(formatDate(today)); // 오늘 날짜로 초기값 설정\n\n  // isInitialRender 정의 (첫 렌더링 시 특정 로직 제어용)\n  const isInitialRender = useRef(true); \n\n  // Tabulator 테이블 컬럼 정의 (draw.io 및 userLoginHistory.json 데이터 구조 기반)\n  const columns = [\n    { title: \"No.\", field: \"id\", hozAlign: \"center\", width: 60, formatter: \"rownum\" }, // \"No.\" 컬럼 (Tabulator 기본 rownum formatter 사용)\n    { title: \"월\", field: \"MDATE\", hozAlign: \"center\", headerFilter: true, width: 100 },\n    { title: \"일자\", field: \"DDATE\", hozAlign: \"center\", headerFilter: true, width: 120 },\n    { title: \"사원번호\", field: \"EMPNO\", hozAlign: \"center\", headerFilter: true, width: 120 },\n    { title: \"이름\", field: \"EMPNM\", hozAlign: \"center\", headerFilter: true, width: 120 },\n    { title: \"사용자IP\", field: \"USERIP\", hozAlign: \"center\", headerFilter: true, width: 150 },\n    { title: \"구분(W/M)\", field: \"USERCONGB\", hozAlign: \"center\", headerFilter: true, width: 100 },\n  ];\n\n  // Tabulator 테이블 초기화 (컴포넌트 마운트 시 한 번만 실행)\n  useEffect(() => {\n    const initializeTable = async () => {\n      if (!tableRef.current) {\n        console.warn(\"테이블 컨테이너가 준비되지 않았습니다.\");\n        return;\n      }\n      try {\n        tableInstance.current = createTable(tableRef.current, [], columns, {\n          pagination: \"local\", // 로컬 페이지네이션 사용\n          paginationSize: 10, // 한 페이지에 10개씩 항목 표시\n          paginationSizeSelector: [10, 20, 50, 100, true], // 페이지당 항목 수 선택 옵션\n          layout: \"fitColumns\", // 컬럼 너비를 테이블 너비에 맞게 조절\n        });\n        if (!tableInstance.current) {\n            throw new Error(\"createTable 함수가 유효한 Tabulator 인스턴스를 반환하지 않았습니다.\");\n        }\n        setTableStatus(\"ready\");\n\n        // 테이블 초기화 후, 초기 날짜 필터 값을 사용하여 즉시 데이터 로드\n        await executeSearch(); \n\n      } catch (err) {\n        setTableStatus(\"error\");\n        console.error(\"테이블 초기화 실패:\", err.message);\n        setError(\"테이블 초기화 중 오류가 발생했습니다.\");\n      }\n    };\n\n    initializeTable();\n\n    // 컴포넌트 언마운트 시 Tabulator 인스턴스 정리 (메모리 누수 방지)\n    return () => {\n      if (tableInstance.current) {\n        tableInstance.current.destroy();\n        tableInstance.current = null;\n        setTableStatus(\"initializing\");\n      }\n    };\n  }, []); // 의존성 배열이 비어있으므로, 컴포넌트 마운트 시 한 번만 실행\n\n  // displayData(테이블에 표시될 데이터) 상태가 변경될 때 Tabulator 테이블을 업데이트\n  useEffect(() => {\n    if (!tableInstance.current || tableStatus !== \"ready\") {\n        return; // 테이블 인스턴스가 없거나 준비되지 않았으면 아무것도 하지 않음\n    }\n\n    if (loading) {\n      // 데이터 로딩 중이면 테이블 데이터 초기화 및 로딩 메시지 표시\n      tableInstance.current.clearData();\n      setRowCount(0);\n      tableInstance.current.alert(\"데이터 로딩 중...\", \"loading\");\n      return;\n    }\n\n    if (displayData.length === 0) {\n      // 표시할 데이터가 없으면 테이블 초기화 및 메시지 표시\n      tableInstance.current.clearData();\n      setRowCount(0);\n      // 첫 렌더링 시에는 \"검색 결과 없음\" 메시지를 바로 보여주지 않음 (UX 고려)\n      if (!isInitialRender.current) {\n        tableInstance.current.alert(\"검색 결과 없음\", \"info\");\n      } else {\n        tableInstance.current.clearAlert(); // 초기에는 메시지 없음\n      }\n    } else {\n      // 데이터가 있으면 테이블에 데이터 설정 및 메시지 제거\n      tableInstance.current.setData(displayData);\n      tableInstance.current.clearAlert();\n      setRowCount(displayData.length); // 실제 데이터 수로 총 행 수 업데이트\n    }\n    isInitialRender.current = false; // 첫 렌더링이 완료되었음을 표시\n  }, [displayData, loading, tableStatus]);\n\n\n  /**\n   * 데이터 조회 함수 (draw.io UI의 \"조회\" 버튼 클릭 시 실행)\n   * 선택된 기간에 따라 userLoginHistory.json 데이터를 필터링합니다.\n   */\n  const executeSearch = async () => {\n    if (!tableInstance.current || tableStatus !== \"ready\") {\n      console.warn(\"테이블 인스턴스 또는 상태가 준비되지 않아 검색을 실행할 수 없습니다.\");\n      return;\n    }\n\n    setLoading(true); // 로딩 상태 시작\n    setError(null); // 이전 에러 초기화\n\n    try {\n\n       // userLoginHistory.json에서 전체 로그인 이력 데이터를 가져옴\n    // 백엔드 API(/api/oper/loginHistory)로 post 요청을 보내기 위한 fetch 호출 추가\n    const response = await fetch(\"http://localhost:5173/api/oper/loginHistory\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({ startDate, endDate }),\n});\nif (!response.ok) throw new Error(\"API 요청 실패\");\nconst result = await response.json();\nconst data = result.data || [];\n\nlet filteredResults = [...data]; // 필터링을 위한 복사본\n\n    // 날짜 필터링 로직: startDate ~ endDate (포함)\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    end.setHours(23, 59, 59, 999); // 종료일의 마지막 밀리초까지 포함시켜 하루 종일 검색되도록 함\n\n        filteredResults = filteredResults.filter(item => {\n        // userLoginHistory.json의 DDATE 필드 (예: \"2025-05-15\")를 Date 객체로 변환\n        const itemDate = new Date(item.DDATE);\n        // 항목의 날짜가 시작일과 종료일 범위 내에 있는지 확인\n        return itemDate >= start && itemDate <= end;\n    });\n\n        // MAX_RESULT_SIZE 제한 적용 (불필요한 대량 데이터 렌더링 방지)\n    const limitedResults = filteredResults.slice(0, MAX_RESULT_SIZE);\n\n     setDisplayData(limitedResults); // 필터링된 데이터를 테이블에 표시하도록 상태 업데이트\n\n    } catch (err) {\n      console.log(\"데이터 조회 오류:\", err.message);\n      setError(\"데이터를 가져오는 중 오류가 발생했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  \n  };\n\n  return (\n    <div className={styles.container}>\n      {/* draw.io UI의 상단 검색 및 버튼 영역 */}\n      <div className={styles.topSearchArea}>\n        <div className={styles.dateFilterGroup}>\n          <label htmlFor=\"startDate\" className={styles.dateLabel}>기간</label>\n          <input\n            type=\"date\" // HTML5 날짜 선택기 사용\n            id=\"startDate\"\n            className={styles.dateInput}\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n          />\n          <span className={styles.dateSeparator}>~</span>\n          <input\n            type=\"date\" // HTML5 날짜 선택기 사용\n            id=\"endDate\"\n            className={styles.dateInput}\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n          />\n        </div>\n        <button\n          type=\"button\" // <--- **이 속성이 중요합니다! 폼 제출 방지.**\n          className={styles.searchButton}\n          onClick={executeSearch} // 버튼 클릭 시 조회 함수 실행\n        >\n          조회\n        </button>\n      </div>\n\n      {/* \"Total : N\" 및 \"엑셀 다운로드\" 버튼 영역 (테이블 위에 위치) */}\n      <div className={styles.tableToolbar}>\n        <span className={styles.totalCount}>Total : {rowCount}</span>\n        <button\n          className={styles.downloadExcelButton}\n          onClick={() => handleDownloadExcel(tableInstance.current, tableStatus, '로그인이력.xlsx')}\n        >\n          엑셀 다운로드\n        </button>\n      </div>\n\n      {/* Tabulator 테이블이 렌더링될 실제 영역 */}\n      <div className={styles.tableWrapper}>\n        {/* 테이블 초기화 또는 에러 메시지 표시 */}\n        {tableStatus === \"initializing\" && <div className={styles.message}>테이블 초기화 중...</div>}\n        {error && <div className={styles.errorMessage}>{error}</div>}\n        <div\n          ref={tableRef} // Tabulator가 이 div에 렌더링됩니다.\n          className={styles.tableSection}\n          // 로딩 중이거나 테이블이 준비되지 않았을 때는 테이블을 숨김\n          style={{ visibility: loading || tableStatus !== \"ready\" ? \"hidden\" : \"visible\" }}\n        />\n      </div>\n\n      {/* CommonPopup 컴포넌트는 필요에 따라 주석 해제하여 사용 */}\n      {/* <CommonPopup /> */}\n    </div>\n  );\n};\n\nexport default MonthlyLoginHistory;"],"names":["MAX_RESULT_SIZE","MonthlyLoginHistory","tableRef","useRef","tableInstance","loading","setLoading","useState","error","setError","rowCount","setRowCount","tableStatus","setTableStatus","displayData","setDisplayData","today","oneMonthAgo","formatDate","date","year","month","day","startDate","setStartDate","endDate","setEndDate","isInitialRender","columns","useEffect","createTable","executeSearch","err","response","filteredResults","start","end","item","itemDate","limitedResults","jsxs","styles","jsx","e","handleDownloadExcel"],"mappings":"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"}