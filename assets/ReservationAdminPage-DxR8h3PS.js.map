{"version":3,"file":"ReservationAdminPage-DxR8h3PS.js","sources":["../../src/pages/reservation/ReservationAdminPage.jsx"],"sourcesContent":["/**\n * 파일: ReservationAdminPage.jsx\n * 설명: 관리자용 예약 레이아웃 관리 페이지\n * 목적: 층별 섹션 및 호실 정보를 테이블과 클릭 가능한 그리드 UI로 관리\n * 한글 주석: 관리자가 층, 섹션, 호실 유형을 설정하고 DB에 저장하며, 섹션별 호실 크기 합계가 8을 초과하지 않도록 검증\n */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useStore from \"../../store/store\";\nimport { hasPermission } from \"../../utils/authUtils\";\nimport CommonPopup from \"../../components/popup/CommonPopup\";\nimport MainSearch from \"../../components/main/MainSearch\";\nimport TableSearch from \"../../components/table/TableSearch\";\nimport { createTable } from \"../../utils/tableConfig\";\nimport { initialFilters } from \"../../utils/tableEvent\";\nimport { handleDownloadExcel } from \"../../utils/tableExcel\";\nimport styles from \"../../components/table/TableSearch.module.css\";\nimport { fetchData } from \"../../utils/dataUtils\";\nimport api from \"../../utils/api\";\nimport common from \"../../utils/common\";\nimport { errorMsgPopup } from \"../../utils/errorMsgPopup\";\nimport { msgPopup } from \"../../utils/msgPopup\";\n\n// 테이블 셀 편집기 설정\nconst fn_CellText = { editor: \"input\", editable: true }; // 텍스트 입력 편집기 설정\nconst fn_CellNumber = { editor: \"number\", editorParams: { min: 0 }, editable: true }; // 숫자 입력 편집기 설정\nconst fn_CellSelect = (values) => ({ editor: \"list\", editorParams: { values, autocomplete: true }, editable: true }); // 드롭다운 선택 편집기 설정\nconst fn_CellButton = (label, className, onClick) => ({\n  // 버튼 형식 편집기 설정\n  formatter: (cell) => {\n    const button = document.createElement(\"button\");\n    button.className = `btn btn-sm ${className}`;\n    button.innerText = label;\n    button.onclick = () => onClick(cell.getData());\n    return button;\n  },\n});\n\n// 셀 편집 처리 함수\nconst fn_HandleCellEdit = (cell, field, setData, tableInstance) => {\n  // 셀 편집 후 데이터 업데이트\n  const rowId = `${cell.getRow().getData().ROOM_ID}`;\n  const newValue = cell.getValue();\n  setTimeout(() => {\n    setData((prevData) =>\n      prevData.map((row) => {\n        if (row.ROOM_ID === rowId) {\n          const updatedRow = { ...row, [field]: newValue };\n          if (updatedRow.isDeleted === \"N\" && updatedRow.isAdded === \"N\") {\n            updatedRow.isChanged = \"Y\";\n          }\n          return updatedRow;\n        }\n        return row;\n      })\n    );\n    if (tableInstance.current) tableInstance.current.redraw();\n  }, 0);\n};\n\n// 필드 옵션 데이터 반환\nconst getFieldOptions = (fieldId) => {\n  // 필드별 옵션 데이터 반환\n  const optionsMap = {\n    ROOM_TYPE: [\n      { value: \"\", label: \"전체\" },\n      { value: \"1인실\", label: \"1인실\" },\n      { value: \"2인실\", label: \"2인실\" },\n      { value: \"4인실\", label: \"4인실\" },\n      { value: \"8인실\", label: \"8인실\" },\n    ],\n  };\n  return optionsMap[fieldId] || [];\n};\n\n// 호실 크기 맵\nconst roomSizeMap = {\n  \"1인실\": 1,\n  \"2인실\": 2,\n  \"4인실\": 4,\n  \"8인실\": 8,\n};\n\n// 호실 크기 기반으로 colSpan과 rowSpan 계산\nconst calculateSpan = (roomType) => {\n  // 호실 유형에 따른 그리드 스팬 계산\n  const size = roomSizeMap[roomType] || 1;\n  if (size === 1) return { colSpan: 1, rowSpan: 1 };\n  if (size === 2) return { colSpan: 2, rowSpan: 1 }; // 기본값 2x1 (가로)\n  if (size === 4) return { colSpan: 2, rowSpan: 2 }; // 기본값 2x2\n  if (size === 8) return { colSpan: 2, rowSpan: 4 }; // 8인실 강제 2x4로 설정\n  return { colSpan: 1, rowSpan: 1 };\n};\n\n// 레이아웃 관리 페이지 컴포넌트\nconst ReservationAdminPage = () => {\n  const { user } = useStore();\n  const navigate = useNavigate();\n\n  // 검색 설정\n  const searchConfig = {\n    areas: [\n      {\n        type: \"search\",\n        fields: [\n          {\n            id: \"FLOOR_ID\",\n            type: \"text\",\n            row: 1,\n            label: \"층 ID\",\n            labelVisible: true,\n            placeholder: \"층 ID 검색 (예: 1F)\",\n            width: \"200px\",\n            height: \"30px\",\n            backgroundColor: \"#ffffff\",\n            color: \"#000000\",\n            enabled: hasPermission(user?.auth, \"admin\"),\n          },\n          {\n            id: \"SECTION\",\n            type: \"text\",\n            row: 1,\n            label: \"섹션\",\n            labelVisible: true,\n            placeholder: \"섹션 검색 (예: A)\",\n            width: \"150px\",\n            height: \"30px\",\n            backgroundColor: \"#ffffff\",\n            color: \"#000000\",\n            enabled: hasPermission(user?.auth, \"admin\"),\n          },\n          {\n            id: \"ROOM_TYPE\",\n            type: \"select\",\n            row: 2,\n            label: \"호실 유형\",\n            labelVisible: true,\n            options: getFieldOptions(\"ROOM_TYPE\"),\n            width: \"200px\",\n            height: \"30px\",\n            backgroundColor: \"#ffffff\",\n            color: \"#000000\",\n            enabled: hasPermission(user?.auth, \"admin\"),\n          },\n        ],\n      },\n      {\n        type: \"buttons\",\n        fields: [\n          {\n            id: \"searchBtn\",\n            type: \"button\",\n            row: 1,\n            label: \"검색\",\n            eventType: \"search\",\n            width: \"80px\",\n            height: \"30px\",\n            backgroundColor: \"#00c4b4\",\n            color: \"#ffffff\",\n            enabled: true,\n          },\n        ],\n      },\n    ],\n  };\n\n  // 테이블 필터 설정\n  const filterTableFields = [\n    {\n      id: \"filterSelect\",\n      label: \"\",\n      type: \"select\",\n      options: [\n        { value: \"\", label: \"선택\" },\n        { value: \"ROOM_ID\", label: \"호실 ID\" },\n        { value: \"FLOOR_ID\", label: \"층 ID\" },\n        { value: \"SECTION\", label: \"섹션\" },\n        { value: \"ROOM_TYPE\", label: \"호실 유형\" },\n        { value: \"PRICE\", label: \"호실 가격\" },\n        { value: \"STATUS\", label: \"상태\" },\n      ],\n    },\n    {\n      id: \"filterText\",\n      label: \"\",\n      type: \"text\",\n      placeholder: \"찾을 내용을 입력하세요\",\n      width: \"200px\",\n    },\n  ];\n\n  // 상태 관리\n  const [filters, setFilters] = useState(initialFilters(searchConfig.areas.find((area) => area.type === \"search\").fields)); // 검색 필터 상태\n  const [tableFilters, setTableFilters] = useState(initialFilters(filterTableFields)); // 테이블 필터 상태\n  const [loading, setLoading] = useState(false); // 로딩 상태\n  const [data, setData] = useState([]); // 데이터 상태\n  const [isSearched, setIsSearched] = useState(false); // 검색 여부 상태\n  const [tableStatus, setTableStatus] = useState(\"initializing\"); // 테이블 상태\n  const [showAddPopup, setShowAddPopup] = useState(false); // 추가 팝업 표시 상태\n  const [imsiCounter, setImsiCounter] = useState(1); // 임시 카운터\n  const [rowCount, setRowCount] = useState(0); // 행 수\n  const [floors, setFloors] = useState([]); // 층 목록\n  const [selectedFloor, setSelectedFloor] = useState(\"\"); // 선택된 층\n  const [sectionLayout, setSectionLayout] = useState({}); // 섹션 레이아웃 상태\n  const [gridLayout, setGridLayout] = useState({}); // 그리드 레이아웃 상태\n  const tableRef = useRef(null); // 테이블 참조\n  const tableInstance = useRef(null); // 테이블 인스턴스 참조\n  const isInitialRender = useRef(true); // 초기 렌더링 플래그\n  const [newRowData, setNewRowData] = useState({\n    // 새 행 데이터 초기값\n    FLOOR_ID: \"\",\n    SECTION: \"\",\n    ROOM_TYPE: \"1인실\",\n    PRICE: 0,\n    ROOM_INDEX: 1,\n  });\n  const [dragState, setDragState] = useState({\n    // 드래그 상태\n    isDragging: false,\n    startCell: null,\n    endCell: null,\n    section: null,\n  });\n  const [newFloorInput, setNewFloorInput] = useState(\"\"); // 새 층 입력 상태\n\n  // 테이블 컬럼 정의\n  const columns = [\n    {\n      frozen: true,\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"작업\",\n      field: \"actions\",\n      width: 80,\n      visible: true,\n      ...fn_CellButton(\"삭제\", `btn-danger ${styles.deleteButton}`, (rowData) => handleDelete(rowData)),\n    },\n    {\n      frozen: true,\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"작업대상\",\n      field: \"applyTarget\",\n      sorter: \"string\",\n      width: 100,\n      formatter: (cell) => {\n        const rowData = cell.getRow().getData();\n        let label = \"\";\n        let stateField = \"\";\n        if (rowData.isDeleted === \"Y\") {\n          label = \"삭제\";\n          stateField = \"isDeleted\";\n        } else if (rowData.isAdded === \"Y\") {\n          label = \"추가\";\n          stateField = \"isAdded\";\n        } else if (rowData.isChanged === \"Y\") {\n          label = \"변경\";\n          stateField = \"isChanged\";\n        }\n        if (!label) return \"\";\n        const div = document.createElement(\"div\");\n        div.style.display = \"flex\";\n        div.style.alignItems = \"center\";\n        div.style.justifyContent = \"center\";\n        div.style.gap = \"5px\";\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.checked = rowData[stateField] === \"Y\";\n        checkbox.onclick = () => {\n          setTimeout(() => {\n            setData((prevData) =>\n              prevData\n                .map((row) => {\n                  if (row.ROOM_ID === rowData.ROOM_ID) {\n                    const updatedRow = { ...row, [stateField]: checkbox.checked ? \"Y\" : \"N\" };\n                    if (stateField === \"isDeleted\" && !checkbox.checked) updatedRow.isChanged = \"N\";\n                    if (stateField === \"isAdded\" && !checkbox.checked) return null;\n                    return updatedRow;\n                  }\n                  return row;\n                })\n                .filter(Boolean)\n            );\n          }, 0);\n        };\n        const span = document.createElement(\"span\");\n        span.innerText = label;\n        div.appendChild(checkbox);\n        div.appendChild(span);\n        return div;\n      },\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"호실 ID\",\n      field: \"ROOM_ID\",\n      sorter: \"string\",\n      width: 120,\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"층 ID\",\n      field: \"FLOOR_ID\",\n      sorter: \"string\",\n      width: 100,\n      ...fn_CellText,\n      cellEdited: (cell) => fn_HandleCellEdit(cell, \"FLOOR_ID\", setData, tableInstance),\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"섹션\",\n      field: \"SECTION\",\n      sorter: \"string\",\n      width: 80,\n      ...fn_CellText,\n      cellEdited: (cell) => fn_HandleCellEdit(cell, \"SECTION\", setData, tableInstance),\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"호실 유형\",\n      field: \"ROOM_TYPE\",\n      sorter: \"string\",\n      width: 120,\n      ...fn_CellSelect([\"1인실\", \"2인실\", \"4인실\", \"8인실\"]),\n      cellEdited: (cell) => fn_HandleCellEdit(cell, \"ROOM_TYPE\", setData, tableInstance),\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"호실 가격\",\n      field: \"PRICE\",\n      sorter: \"number\",\n      width: 120,\n      ...fn_CellNumber,\n      cellEdited: (cell) => fn_HandleCellEdit(cell, \"PRICE\", setData, tableInstance),\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"상태\",\n      field: \"STATUS\",\n      sorter: \"string\",\n      width: 100,\n      ...fn_CellSelect([\"사용 가능\", \"사용 중\"]),\n      cellEdited: (cell) => fn_HandleCellEdit(cell, \"STATUS\", setData, tableInstance),\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"생성일시\",\n      field: \"CREATE_DATE\",\n      sorter: \"string\",\n      width: 150,\n    },\n    {\n      headerHozAlign: \"center\",\n      hozAlign: \"center\",\n      title: \"수정일시\",\n      field: \"UPDATE_DATE\",\n      sorter: \"string\",\n      width: 150,\n    },\n  ];\n\n  // 데이터 로드 함수\n  const loadData = async () => {\n    setLoading(true); // 로딩 시작\n    setIsSearched(true); // 검색 플래그 설정\n    try {\n      const params = {\n        p_FLOOR_ID: filters.FLOOR_ID || \"\",\n        p_SECTION: filters.SECTION || \"\",\n        p_DEBUG: \"F\",\n      };\n      const response = await fetchData(api, `${common.getServerUrl(\"reservation/layout/list\")}`, params, { timeout: 30000 });\n      if (!response.success) {\n        errorMsgPopup(response.errMsg || \"레이아웃 데이터를 가져오는 중 오류가 발생했습니다.\");\n        setData([]);\n        return;\n      }\n      const responseData = Array.isArray(response.data)\n        ? response.data.map((item) => ({\n            ROOM_ID: item.ROOM_ID || `${item.FLOOR_ID}${item.SECTION}${item.ROOM_INDEX || 1}`,\n            FLOOR_ID: item.FLOOR_ID || \"\",\n            SECTION: item.SECTION || \"\",\n            ROOM_TYPE: [\"1인실\", \"2인실\", \"4인실\", \"8인실\"].includes(item.ROOM_TYPE) ? item.ROOM_TYPE : \"1인실\",\n            PRICE: item.PRICE || 0,\n            CREATE_DATE: item.CREATE_DATE || new Date().toLocaleString(\"ko-KR\", { timeZone: \"Asia/Seoul\" }),\n            UPDATE_DATE: item.UPDATE_DATE || new Date().toLocaleString(\"ko-KR\", { timeZone: \"Asia/Seoul\" }),\n            STATUS: item.STATUS || \"사용 가능\",\n            isDeleted: \"N\",\n            isChanged: \"N\",\n            isAdded: \"N\",\n            col: Math.min(Math.max(item.col || 0, 0), 1), // col 값을 0~1로 제한\n            row: Math.min(Math.max(item.row || 0, 0), 3), // row 값을 0~3으로 제한\n            ...calculateSpan([\"1인실\", \"2인실\", \"4인실\", \"8인실\"].includes(item.ROOM_TYPE) ? item.ROOM_TYPE : \"1인실\"),\n          }))\n        : [];\n      setData(responseData);\n      const uniqueFloors = [...new Set(responseData.map((item) => item.FLOOR_ID))].filter(Boolean);\n      setFloors(uniqueFloors);\n      if (uniqueFloors.length > 0 && !selectedFloor) setSelectedFloor(uniqueFloors[0] || \"\");\n      const initialLayout = uniqueFloors.reduce((acc, floor) => {\n        acc[floor] = { A: [], B: [], C: [] };\n        responseData\n          .filter((item) => item.FLOOR_ID === floor && item.isDeleted !== \"Y\")\n          .forEach((item) => {\n            acc[floor][item.SECTION].push(item.ROOM_TYPE);\n          });\n        return acc;\n      }, {});\n      setSectionLayout(initialLayout);\n\n      const initialGrid = uniqueFloors.reduce((acc, floor) => {\n        acc[floor] = { A: [], B: [], C: [] };\n        responseData\n          .filter((item) => item.FLOOR_ID === floor && item.isDeleted !== \"Y\")\n          .forEach((item) => {\n            const validRoomType = item.ROOM_TYPE;\n            const { colSpan, rowSpan } = calculateSpan(validRoomType);\n            acc[floor][item.SECTION].push({\n              roomType: validRoomType,\n              col: item.col,\n              row: item.row,\n              colSpan: validRoomType === \"8인실\" ? 2 : colSpan, // 8인실 강제 2\n              rowSpan: validRoomType === \"8인실\" ? 4 : rowSpan, // 8인실 강제 4\n              size: roomSizeMap[validRoomType],\n              orientation: colSpan > rowSpan ? \"horizontal\" : \"vertical\",\n            });\n          });\n        return acc;\n      }, {});\n      setGridLayout(initialGrid);\n    } catch (err) {\n      console.error(\"데이터 로드 실패:\", err);\n      errorMsgPopup(`데이터 로드 실패: ${err.message || \"서버 응답 없음\"}`);\n      setData([]);\n    } finally {\n      setLoading(false); // 로딩 종료\n    }\n  };\n\n  useEffect(() => {\n    // 사용자 권한 확인 및 초기 데이터 로드\n    if (!user || !hasPermission(user.auth, \"menuManage\")) navigate(\"/\");\n    else loadData();\n  }, [user, navigate]);\n\n  useEffect(() => {\n    // 테이블 초기화\n    const initializeTable = async () => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      if (!tableRef.current) {\n        console.warn(\"테이블 컨테이너가 준비되지 않았습니다.\");\n        return;\n      }\n      try {\n        tableInstance.current = createTable(tableRef.current, columns, [], {\n          selectable: true, // 행 선택 가능하도록 설정\n          selectableRangeMode: \"click\", // 클릭으로 선택 활성화\n          rowFormatter: (row) => {\n            const data = row.getData();\n            const el = row.getElement();\n            el.classList.remove(\"tabulator-selected\", styles.addedRow, styles.editedRow);\n\n            if (data.isDeleted === \"Y\") {\n              row.select(); // 삭제된 행을 자동 선택\n              el.style.backgroundColor = \"#ffcccc\"; // 연한 빨간색 하이라이트\n            } else if (data.isAdded === \"Y\") {\n              el.classList.add(styles.addedRow);\n              el.style.backgroundColor = \"#d4edda\"; // 추가 시 하이라이트\n            } else if (data.isChanged === \"Y\") {\n              el.classList.add(styles.editedRow);\n            }\n          },\n        });\n        setTableStatus(\"ready\");\n      } catch (err) {\n        setTableStatus(\"error\");\n        console.error(\"테이블 초기화 실패:\", err.message);\n      }\n    };\n    initializeTable();\n    return () => {\n      if (tableInstance.current) {\n        tableInstance.current.destroy();\n        tableInstance.current = null;\n        setTableStatus(\"initializing\");\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    // 데이터 변경 시 테이블 갱신\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    const table = tableInstance.current;\n    if (!table || tableStatus !== \"ready\" || loading) return;\n    table.setData(data);\n    if (isSearched && data.length === 0 && !loading) table.alert(\"검색 결과 없음\", \"info\");\n    else {\n      table.clearAlert();\n      setRowCount(table.getDataCount());\n    }\n  }, [data, tableStatus, loading, isSearched]);\n\n  useEffect(() => {\n    // 필터 적용\n    if (isInitialRender.current || !tableInstance.current || tableStatus !== \"ready\" || loading) return;\n    const { filterSelect, filterText } = tableFilters;\n    if (filterText && filterSelect) tableInstance.current.setFilter(filterSelect, \"like\", filterText);\n    else if (filterText) {\n      if (filterText !== \"\") {\n        tableInstance.current.setFilter(\n          [\n            { field: \"ROOM_ID\", type: \"like\", value: filterText },\n            { field: \"FLOOR_ID\", type: \"like\", value: filterText },\n            { field: \"SECTION\", type: \"like\", value: filterText },\n            { field: \"ROOM_TYPE\", type: \"like\", value: filterText },\n            { field: \"PRICE\", type: \"like\", value: filterText },\n            { field: \"STATUS\", type: \"like\", value: filterText },\n          ],\n          \"or\"\n        );\n      } else tableInstance.current.clearFilter();\n    } else if (filterSelect) tableInstance.current.clearFilter();\n  }, [tableFilters, tableStatus, loading]);\n\n  useEffect(() => {\n    // 드래그 중 그리드 업데이트\n    if (dragState.isDragging && selectedFloor) {\n      const { startCell, endCell, section } = dragState;\n      if (startCell && endCell) {\n        const colStart = Math.min(startCell.col, endCell.col);\n        const colEnd = Math.max(startCell.col, endCell.col);\n        const rowStart = Math.min(startCell.row, endCell.row);\n        const rowEnd = Math.max(startCell.row, endCell.row);\n        setGridLayout((prev) => ({\n          ...prev,\n          [selectedFloor]: {\n            ...prev[selectedFloor],\n            [section]:\n              prev[selectedFloor]?.[section]?.map((item) =>\n                item.col >= colStart && item.col <= colEnd && item.row >= rowStart && item.row <= rowEnd\n                  ? { ...item, isDragging: true }\n                  : item\n              ) || [],\n          },\n        }));\n      }\n    }\n  }, [dragState, selectedFloor]);\n\n  const handleDynamicEvent = (eventType) => {\n    // 동적 이벤트 처리\n    if (eventType === \"search\") loadData();\n  };\n\n  const handleAddClick = () => setShowAddPopup(true); // 추가 버튼 클릭 처리\n\n  const handleAddConfirm = () => {\n    // 추가 확인 처리\n    if (!newRowData.FLOOR_ID || !newRowData.SECTION || !newRowData.ROOM_TYPE) {\n      errorMsgPopup(\"층 ID, 섹션, 호실 유형은 필수 입력 항목입니다.\");\n      return;\n    }\n    if (!newRowData.FLOOR_ID.match(/^[0-9]+F$/)) {\n      errorMsgPopup(\"층 ID는 1F, 2F 등의 형식이어야 합니다.\");\n      return;\n    }\n    if (![\"A\", \"B\", \"C\"].includes(newRowData.SECTION)) {\n      errorMsgPopup(\"섹션은 A, B, C 중 하나여야 합니다.\");\n      return;\n    }\n    if (newRowData.PRICE < 0) {\n      errorMsgPopup(\"호실 가격은 0 이상이어야 합니다.\");\n      return;\n    }\n\n    const sectionData = data.filter(\n      (row) =>\n        row.FLOOR_ID === newRowData.FLOOR_ID && row.SECTION === newRowData.SECTION && row.isDeleted !== \"Y\" && row.STATUS !== \"사용 중\"\n    );\n    const totalSize = sectionData.reduce((sum, row) => sum + (roomSizeMap[row.ROOM_TYPE || \"1인실\"] || 0), 0);\n    const newSize = roomSizeMap[newRowData.ROOM_TYPE] || 0;\n    if (totalSize + newSize > 8) {\n      errorMsgPopup(`${newRowData.SECTION} 섹션의 총 호실 크기가 8을 초과할 수 없습니다. 현재 합계: ${totalSize}`);\n      return;\n    }\n\n    const existingIndexes = data\n      .filter(\n        (row) =>\n          row.FLOOR_ID === newRowData.FLOOR_ID && row.SECTION === newRowData.SECTION && row.isDeleted !== \"Y\" && row.STATUS !== \"사용 중\"\n      )\n      .map((row) => parseInt(row.ROOM_ID.replace(`${row.FLOOR_ID}${row.SECTION}`, \"\")) || 0);\n    const newRoomIndex = Math.max(0, ...existingIndexes) + 1;\n    const newRoomId = `${newRowData.FLOOR_ID}${newRowData.SECTION}${newRoomIndex}`;\n\n    const { colSpan, rowSpan } = calculateSpan(newRowData.ROOM_TYPE);\n    const newRow = {\n      ROOM_ID: newRoomId,\n      FLOOR_ID: newRowData.FLOOR_ID,\n      SECTION: newRowData.SECTION,\n      ROOM_TYPE: newRowData.ROOM_TYPE,\n      PRICE: newRowData.PRICE,\n      CREATE_DATE: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n      UPDATE_DATE: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n      STATUS: \"사용 가능\",\n      col: 0,\n      row: 0,\n      colSpan,\n      rowSpan,\n      isDeleted: \"N\",\n      isChanged: \"N\",\n      isAdded: \"Y\",\n    };\n    setData((prevData) => [newRow, ...prevData]);\n    setSectionLayout((prev) => ({\n      ...prev,\n      [newRowData.FLOOR_ID]: {\n        ...(prev[newRowData.FLOOR_ID] || { A: [], B: [], C: [] }),\n        [newRowData.SECTION]: [...(prev[newRowData.FLOOR_ID]?.[newRowData.SECTION] || []), newRowData.ROOM_TYPE],\n      },\n    }));\n    setGridLayout((prev) => ({\n      ...prev,\n      [newRowData.FLOOR_ID]: {\n        ...(prev[newRowData.FLOOR_ID] || { A: [], B: [], C: [] }),\n        [newRowData.SECTION]: [\n          ...(prev[newRowData.FLOOR_ID]?.[newRowData.SECTION] || []),\n          {\n            roomType: newRowData.ROOM_TYPE,\n            col: 0,\n            row: 0,\n            colSpan,\n            rowSpan,\n            size: roomSizeMap[newRowData.ROOM_TYPE],\n            orientation: colSpan > rowSpan ? \"horizontal\" : \"vertical\",\n          },\n        ],\n      },\n    }));\n    setImsiCounter((prev) => prev + 1);\n    setShowAddPopup(false);\n    setNewRowData({\n      FLOOR_ID: \"\",\n      SECTION: \"\",\n      ROOM_TYPE: \"1인실\",\n      PRICE: 0,\n      ROOM_INDEX: 1,\n    });\n  };\n\n  const handleAddCancel = () => {\n    // 추가 취소 처리\n    setShowAddPopup(false);\n    setNewRowData({\n      FLOOR_ID: \"\",\n      SECTION: \"\",\n      ROOM_TYPE: \"1인실\",\n      PRICE: 0,\n      ROOM_INDEX: 1,\n    });\n  };\n\n  const handleDelete = (rowData) => {\n    // 호실 삭제 처리\n    if (!rowData || !rowData.ROOM_ID) {\n      errorMsgPopup(\"삭제할 데이터가 없습니다.\");\n      return;\n    }\n    if (rowData.STATUS === \"사용 중\") {\n      errorMsgPopup(\"사용 중인 호실은 삭제할 수 없습니다.\");\n      return;\n    }\n    const table = tableInstance.current;\n    if (table) {\n      const row = table.getRows().find((r) => r.getData().ROOM_ID === rowData.ROOM_ID);\n      if (row) {\n        row.select(); // 삭제 버튼 클릭 시 해당 행 선택\n      }\n    }\n    setData((prevData) =>\n      prevData.map((row) =>\n        row.ROOM_ID === rowData.ROOM_ID ? { ...row, isDeleted: \"Y\", isChanged: row.isAdded === \"Y\" ? \"N\" : \"Y\" } : row\n      )\n    );\n    setSectionLayout((prev) => ({\n      ...prev,\n      [rowData.FLOOR_ID]: {\n        ...prev[rowData.FLOOR_ID],\n        [rowData.SECTION]:\n          prev[rowData.FLOOR_ID]?.[rowData.SECTION]?.filter(\n            (_, i) => i !== prev[rowData.FLOOR_ID]?.[rowData.SECTION]?.indexOf(rowData.ROOM_TYPE || \"1인실\")\n          ) || [],\n      },\n    }));\n    setGridLayout((prev) => ({\n      ...prev,\n      [rowData.FLOOR_ID]: {\n        ...prev[rowData.FLOOR_ID],\n        [rowData.SECTION]:\n          prev[rowData.FLOOR_ID]?.[rowData.SECTION]?.filter((item) => !(item.col === rowData.col && item.row === rowData.row)) || [],\n      },\n    }));\n  };\n\n  const handleAddFloor = () => {\n    // 새 층 추가 처리\n    if (!newFloorInput) {\n      errorMsgPopup(\"층 ID를 입력해주세요.\");\n      return;\n    }\n    if (!newFloorInput.match(/^[0-9]+F$/)) {\n      errorMsgPopup(\"층 ID는 1F, 2F 등의 형식이어야 합니다.\");\n      return;\n    }\n    if (floors.includes(newFloorInput)) {\n      errorMsgPopup(\"이미 존재하는 층 ID입니다.\");\n      return;\n    }\n\n    setFloors([...floors, newFloorInput]);\n    setSelectedFloor(newFloorInput);\n    setSectionLayout((prev) => ({\n      ...prev,\n      [newFloorInput]: { A: [], B: [], C: [] },\n    }));\n    setGridLayout((prev) => ({\n      ...prev,\n      [newFloorInput]: { A: [], B: [], C: [] },\n    }));\n    setNewFloorInput(\"\");\n    msgPopup(`새로운 층 ${newFloorInput}가 추가되었습니다.`);\n  };\n\n  const handleDeleteFloor = () => {\n    if (!newFloorInput) {\n      errorMsgPopup(\"삭제할 층 ID를 입력해주세요.\");\n      return;\n    }\n    if (!newFloorInput.match(/^[0-9]+F$/)) {\n      errorMsgPopup(\"층 ID는 1F, 2F 등의 형식이어야 합니다.\");\n      return;\n    }\n    if (!floors.includes(newFloorInput)) {\n      errorMsgPopup(\"입력한 층 ID가 존재하지 않습니다.\");\n      return;\n    }\n    const isInUse = data.some((item) => item.FLOOR_ID === newFloorInput && item.STATUS === \"사용 중\");\n    if (isInUse) {\n      errorMsgPopup(\"사용 중인 층은 삭제할 수 없습니다.\");\n      return;\n    }\n\n    setData((prevData) =>\n      prevData.map((row) =>\n        row.FLOOR_ID === selectedFloor && row.isDeleted !== \"Y\" && row.STATUS !== \"사용 중\"\n          ? { ...row, isDeleted: \"Y\", isChanged: row.isAdded === \"Y\" ? \"N\" : \"Y\" }\n          : row\n      )\n    );\n\n    setSectionLayout((prev) => {\n      const newLayout = { ...prev };\n      delete newLayout[selectedFloor];\n      return newLayout;\n    });\n    setGridLayout((prev) => {\n      const newLayout = { ...prev };\n      delete newLayout[selectedFloor];\n      return newLayout;\n    });\n\n    setFloors((prev) => prev.filter((floor) => floor !== selectedFloor));\n    setSelectedFloor(floors.find((floor) => floor !== selectedFloor) || \"\");\n    // msgPopup(`층 ${selectedFloor}가 삭제되었습니다.`);\n  };\n\n  const handleMouseDown = (section, col, row) => {\n    // 마우스 다운 이벤트 처리\n    if (!selectedFloor) {\n      errorMsgPopup(\"층을 먼저 선택하세요.\");\n      return;\n    }\n    const isOccupied = data.some(\n      (item) =>\n        item.FLOOR_ID === selectedFloor && item.SECTION === section && item.col === col && item.row === row && item.STATUS === \"사용 중\"\n    );\n    if (isOccupied) {\n      errorMsgPopup(\"사용 중인 호실은 수정할 수 없습니다.\");\n      return;\n    }\n    setDragState({\n      isDragging: true,\n      startCell: { col, row },\n      endCell: { col, row },\n      section,\n    });\n  };\n\n  const handleMouseOver = (col, row) => {\n    // 마우스 오버 이벤트 처리\n    if (dragState.isDragging && selectedFloor) {\n      setDragState((prev) => ({\n        ...prev,\n        endCell: { col: Math.min(Math.max(col, 0), 1), row: Math.min(Math.max(row, 0), 3) },\n      }));\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (!dragState.isDragging || !selectedFloor) return;\n    const { startCell, endCell, section } = dragState;\n\n    const colStart = Math.min(startCell.col, endCell.col);\n    const colEnd = Math.max(startCell.col, endCell.col);\n    const rowStart = Math.min(startCell.row, endCell.row);\n    const rowEnd = Math.max(startCell.row, endCell.row);\n    let colSpan = colEnd - colStart + 1;\n    let rowSpan = rowEnd - rowStart + 1;\n    const size = colSpan * rowSpan;\n\n    // 크기 및 방향 검증: 1, 2, 4, 8만 허용, 2인실과 4인실의 유효한 패턴 적용\n    if (![1, 2, 4, 8].includes(size)) {\n      errorMsgPopup(\"선택한 셀 크기는 1, 2, 4, 8 중 하나여야 합니다.\");\n      setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n      return;\n    }\n\n    let roomType, adjustedColSpan, adjustedRowSpan;\n    if (size === 1) {\n      roomType = \"1인실\";\n      adjustedColSpan = 1;\n      adjustedRowSpan = 1;\n    } else if (size === 2) {\n      roomType = \"2인실\";\n      if (colSpan === 1 && rowSpan === 2) {\n        adjustedColSpan = 1;\n        adjustedRowSpan = 2; // 1x2 (세로)\n      } else if (colSpan === 2 && rowSpan === 1) {\n        adjustedColSpan = 2;\n        adjustedRowSpan = 1; // 2x1 (가로)\n      } else {\n        errorMsgPopup(\"2인실은 1x2 또는 2x1 형식이어야 합니다.\");\n        setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n        return;\n      }\n    } else if (size === 4) {\n      roomType = \"4인실\";\n      if (colSpan === 1 && rowSpan === 4) {\n        adjustedColSpan = 1;\n        adjustedRowSpan = 4; // 1x4 (세로)\n      } else if (colSpan === 2 && rowSpan === 2) {\n        adjustedColSpan = 2;\n        adjustedRowSpan = 2; // 2x2 (가로)\n      } else {\n        errorMsgPopup(\"4인실은 1x4 또는 2x2 형식이어야 합니다.\");\n        setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n        return;\n      }\n    } else if (size === 8) {\n      roomType = \"8인실\";\n      adjustedColSpan = 2;\n      adjustedRowSpan = 4; // 2x4로 고정\n    }\n\n    const currentSize = sectionLayout[selectedFloor]?.[section]?.reduce((sum, r) => sum + (roomSizeMap[r || \"1인실\"] || 0), 0) || 0;\n    if (currentSize + size > 8) {\n      errorMsgPopup(`${section} 섹션의 총 크기가 8을 초과할 수 없습니다. (현재: ${currentSize})`);\n      setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n      return;\n    }\n\n    const isOverlapping = gridLayout[selectedFloor]?.[section]?.some((item) => {\n      const itemColEnd = item.col + (item.colSpan || 1) - 1;\n      const itemRowEnd = item.row + (item.rowSpan || 1) - 1;\n      return !(colEnd < item.col || colStart > itemColEnd || rowEnd < item.row || rowStart > itemRowEnd);\n    });\n    if (isOverlapping) {\n      errorMsgPopup(\"이미 다른 호실이 배치된 위치입니다.\");\n      setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n      return;\n    }\n\n    const existingIndexes = data\n      .filter((row) => row.FLOOR_ID === selectedFloor && row.SECTION === section && row.isDeleted !== \"Y\" && row.STATUS !== \"사용 중\")\n      .map((row) => parseInt(row.ROOM_ID.replace(`${selectedFloor}${section}`, \"\")) || 0);\n    const newRoomIndex = Math.max(0, ...existingIndexes) + 1;\n    const newRoomId = `${selectedFloor}${section}${newRoomIndex}`;\n\n    const newRow = {\n      ROOM_ID: newRoomId,\n      FLOOR_ID: selectedFloor,\n      SECTION: section,\n      ROOM_TYPE: roomType,\n      PRICE: 0,\n      CREATE_DATE: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n      UPDATE_DATE: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n      STATUS: \"사용 가능\",\n      col: colStart,\n      row: rowStart,\n      colSpan: adjustedColSpan,\n      rowSpan: adjustedRowSpan,\n      isDeleted: \"N\",\n      isChanged: \"N\",\n      isAdded: \"Y\",\n    };\n\n    setData((prevData) => [newRow, ...prevData]);\n    setSectionLayout((prev) => ({\n      ...prev,\n      [selectedFloor]: {\n        ...prev[selectedFloor],\n        [section]: [...(prev[selectedFloor]?.[section] || []), roomType],\n      },\n    }));\n    setGridLayout((prev) => ({\n      ...prev,\n      [selectedFloor]: {\n        ...prev[selectedFloor],\n        [section]: [\n          ...(prev[selectedFloor]?.[section] || []),\n          {\n            roomType,\n            col: colStart,\n            row: rowStart,\n            colSpan: adjustedColSpan,\n            rowSpan: adjustedRowSpan,\n            size,\n            orientation: adjustedColSpan > adjustedRowSpan ? \"horizontal\" : \"vertical\",\n          },\n        ],\n      },\n    }));\n    setDragState({ isDragging: false, startCell: null, endCell: null, section: null });\n  };\n\n  const removeRoom = (section, index) => {\n    // 호실 제거 처리\n    if (!selectedFloor) {\n      errorMsgPopup(\"층을 먼저 선택하세요.\");\n      return;\n    }\n    const room = gridLayout[selectedFloor]?.[section]?.[index];\n    if (!room) return;\n    const roomId = data.find(\n      (row) =>\n        row.FLOOR_ID === selectedFloor &&\n        row.SECTION === section &&\n        row.ROOM_TYPE === (room.roomType || \"1인실\") &&\n        row.col === room.col &&\n        row.row === room.row\n    )?.ROOM_ID;\n    if (!roomId) return;\n    if (\n      data.find((row) => row.ROOM_ID === roomId && row.FLOOR_ID === selectedFloor && row.SECTION === section && row.STATUS === \"사용 중\")\n    ) {\n      errorMsgPopup(\"사용 중인 호실은 삭제할 수 없습니다.\");\n      return;\n    }\n    setData((prevData) =>\n      prevData\n        .map((row) =>\n          row.ROOM_ID === roomId && row.isAdded === \"Y\" ? null : row.ROOM_ID === roomId ? { ...row, isDeleted: \"Y\", isChanged: \"Y\" } : row\n        )\n        .filter(Boolean)\n    );\n    setSectionLayout((prev) => ({\n      ...prev,\n      [selectedFloor]: {\n        ...prev[selectedFloor],\n        [section]: prev[selectedFloor]?.[section]?.filter((_, i) => i !== index) || [],\n      },\n    }));\n    setGridLayout((prev) => ({\n      ...prev,\n      [selectedFloor]: {\n        ...prev[selectedFloor],\n        [section]: prev[selectedFloor]?.[section]?.filter((_, i) => i !== index) || [],\n      },\n    }));\n  };\n\n  const handleSaveLayout = async (e) => {\n    // 레이아웃 저장 처리\n    e.preventDefault();\n    const changedRows = data.filter(\n      (row) => (row.isDeleted === \"Y\" && row.isAdded !== \"Y\") || row.isAdded === \"Y\" || (row.isChanged === \"Y\" && row.isDeleted === \"N\")\n    );\n\n    if (changedRows.length === 0) {\n      errorMsgPopup(\"변경된 데이터가 없습니다.\");\n      return;\n    }\n\n    const sections = [\"A\", \"B\", \"C\"];\n    const floorIds = [...new Set(changedRows.map((row) => row.FLOOR_ID))];\n    for (const floorId of floorIds) {\n      for (const section of sections) {\n        const sectionData = changedRows.filter((row) => row.FLOOR_ID === floorId && row.SECTION === section && row.isDeleted !== \"Y\");\n        const totalSize = sectionData.reduce((sum, row) => sum + (roomSizeMap[row.ROOM_TYPE || \"1인실\"] || 0), 0);\n        if (sectionData.length > 0 && totalSize > 8) {\n          errorMsgPopup(`${floorId} ${section} 섹션의 총 호실 크기가 8을 초과합니다. (현재: ${totalSize})`);\n          return;\n        }\n      }\n    }\n\n    setLoading(true);\n    try {\n      for (const row of changedRows) {\n        let p_GUBUN = \"\";\n        if (row.isDeleted === \"Y\" && row.isAdded !== \"Y\") {\n          // 텍스트 입력값(FLOOR_ID, SECTION 등)을 기준으로 영구 삭제\n          if (filters.FLOOR_ID && row.FLOOR_ID !== filters.FLOOR_ID) continue;\n          if (filters.SECTION && row.SECTION !== filters.SECTION) continue;\n          p_GUBUN = \"D\"; // 영구 삭제로 처리\n        } else if (row.isAdded === \"Y\") p_GUBUN = \"I\";\n        else if (row.isChanged === \"Y\" && row.isDeleted === \"N\") p_GUBUN = \"U\";\n\n        const params = {\n          p_GUBUN,\n          p_ROOM_ID: row.ROOM_ID,\n          p_FLOOR_ID: row.FLOOR_ID,\n          p_SECTION: row.SECTION,\n          p_ROOM_INDEX: parseInt(row.ROOM_ID.replace(`${row.FLOOR_ID}${row.SECTION}`, \"\")) || 1,\n          p_ROOM_TYPE: row.ROOM_TYPE || \"1인실\",\n          p_PRICE: row.PRICE || 0,\n          p_EMP_NO: user?.empNo || \"admin\",\n          p_DEBUG: \"F\",\n        };\n\n        const response = await fetchData(api, `${common.getServerUrl(\"reservation/layout/save\")}`, params, { timeout: 30000 });\n        if (!response.success) {\n          errorMsgPopup(\n            `${p_GUBUN === \"D\" ? \"삭제\" : p_GUBUN === \"I\" ? \"추가\" : \"수정\"} 실패: ${response.errMsg || \"서버 오류\"} (ROOM_ID: ${\n              row.ROOM_ID\n            })`\n          );\n          continue;\n        }\n      }\n      msgPopup(\"모든 변경사항이 성공적으로 저장되었습니다.\");\n      // 삭제된 데이터는 서버에서 영구 제거되었으므로 loadData 호출 시 갱신된 데이터만 가져옴\n      await loadData();\n      setGridLayout((prev) => ({ ...prev })); // UI 갱신\n    } catch (err) {\n      console.error(\"저장 오류:\", err);\n      errorMsgPopup(\"레이아웃 저장 중 오류가 발생했습니다: \" + (err.message || \"서버 응답 없음\"));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <MainSearch config={searchConfig} filters={filters} setFilters={setFilters} onEvent={handleDynamicEvent} />\n      <TableSearch\n        filterFields={filterTableFields}\n        filters={tableFilters}\n        setFilters={setTableFilters}\n        rowCount={rowCount}\n        onDownloadExcel={() => handleDownloadExcel(tableInstance.current, tableStatus, \"레이아웃관리.xlsx\")}\n        buttonStyles={styles}\n      >\n        <div className={styles.btnGroupCustom}>\n          <button className={`${styles.btn} text-bg-primary`} onClick={handleAddClick}>\n            추가\n          </button>\n          <button className={`${styles.btn} text-bg-success`} onClick={handleSaveLayout}>\n            저장\n          </button>\n        </div>\n      </TableSearch>\n      <div className={styles.tableWrapper}>\n        {tableStatus === \"initializing\" && <div>초기화 중...</div>}\n        {loading && <div>로딩 중...</div>}\n        <div\n          ref={tableRef}\n          className={styles.tableSection}\n          style={{ visibility: loading || tableStatus !== \"ready\" ? \"hidden\" : \"visible\" }}\n        />\n      </div>\n      <div className=\"mt-6 max-w-6xl mx-auto\">\n        <div className=\"w-full p-4 bg-gray-100 rounded-lg\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <select\n              value={selectedFloor}\n              onChange={(e) => setSelectedFloor(e.target.value)}\n              style={{\n                padding: \"0.5rem 1rem\",\n                borderRadius: \"8px\",\n                border: \"2px solid #e9ecef\",\n                fontSize: \"1rem\",\n                background: \"white\",\n                cursor: \"pointer\",\n              }}\n            >\n              <option value=\"\" disabled>\n                층을 선택하세요\n              </option>\n              {floors.map((floor) => (\n                <option key={floor} value={floor}>\n                  {floor}\n                </option>\n              ))}\n            </select>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <input\n                type=\"text\"\n                value={newFloorInput}\n                onChange={(e) => setNewFloorInput(e.target.value)}\n                placeholder=\"층 입력 (예: 3F)\"\n                style={{\n                  padding: \"0.5rem\",\n                  borderRadius: \"8px\",\n                  border: \"2px solid #e9ecef\",\n                  fontSize: \"1rem\",\n                }}\n              />\n              <button className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\" onClick={handleAddFloor}>\n                층 추가\n              </button>\n              <button\n                className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\n                onClick={handleDeleteFloor}\n                disabled={!selectedFloor}\n              >\n                층 삭제\n              </button>\n            </div>\n          </div>\n          {selectedFloor && (\n            <div style={{ position: \"relative\", width: \"100%\", height: \"400px\" }}>\n              <div style={{ display: \"flex\", justifyContent: \"space-between\", position: \"absolute\", top: \"-2rem\", left: 0, right: 0 }}>\n                <span style={{ fontSize: \"1.125rem\", fontWeight: \"600\", color: \"#374151\", textAlign: \"center\", flex: \"1\" }}>A 섹션</span>\n                <span style={{ fontSize: \"1.125rem\", fontWeight: \"600\", color: \"#374151\", textAlign: \"center\", flex: \"1\" }}>B 섹션</span>\n                <span style={{ fontSize: \"1.125rem\", fontWeight: \"600\", color: \"#374151\", textAlign: \"center\", flex: \"1\" }}>C 섹션</span>\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexWrap: \"nowrap\",\n                  width: \"100%\",\n                  minWidth: \"100%\",\n                  height: \"300px\",\n                  overflowX: \"auto\",\n                  marginTop: \"1.5rem\",\n                  boxSizing: \"border-box\", // 테두리와 패딩 포함\n                }}\n              >\n                {[\"A\", \"B\", \"C\"].map((section) => (\n                  <div\n                    key={section}\n                    data-section={section}\n                    style={{\n                      flex: \"1 1 33.3%\",\n                      padding: \"8px\",\n                      border: \"2px solid #d1d5db\",\n                      borderRadius: \"8px\",\n                      backgroundColor: \"#fff\",\n                      display: \"grid\",\n                      gridTemplateColumns: \"repeat(2, 1fr)\",\n                      gridTemplateRows: \"repeat(4, 1fr)\",\n                      gap: \"4px\",\n                      minHeight: \"300px\",\n                      position: \"relative\",\n                      margin: \"0 4px\",\n                      minWidth: \"300px\",\n                      boxSizing: \"border-box\", // 테두리와 패딩 포함\n                    }}\n                    onMouseUp={handleMouseUp}\n                  >\n                    {Array.from({ length: 8 }).map((_, index) => {\n                      const col = index % 2;\n                      const row = Math.floor(index / 2);\n                      const isSelected =\n                        dragState.isDragging &&\n                        dragState.section === section &&\n                        col >= Math.min(dragState.startCell?.col, dragState.endCell?.col) &&\n                        col <= Math.max(dragState.startCell?.col, dragState.endCell?.col) &&\n                        row >= Math.min(dragState.startCell?.row, dragState.endCell?.row) &&\n                        row <= Math.max(dragState.startCell?.row, dragState.endCell?.row);\n                      const room = gridLayout[selectedFloor]?.[section]?.find((item) => item.col === col && item.row === row);\n                      const isUsed = data.some(\n                        (item) =>\n                          item.FLOOR_ID === selectedFloor &&\n                          item.SECTION === section &&\n                          item.col === col &&\n                          item.row === row &&\n                          item.STATUS === \"사용 중\"\n                      );\n                      const isOccupied = gridLayout[selectedFloor]?.[section]?.some((item) => {\n                        const itemColEnd = item.col + (item.colSpan || 1) - 1;\n                        const itemRowEnd = item.row + (item.rowSpan || 1) - 1;\n                        return (\n                          col >= item.col &&\n                          col <= itemColEnd &&\n                          row >= item.row &&\n                          row <= itemRowEnd &&\n                          (item.col !== col || item.row !== row)\n                        );\n                      });\n\n                      if (room) {\n                        return (\n                          <div\n                            key={`cell-${section}-${col}-${row}`}\n                            style={{\n                              gridColumn: `${room.col + 1} / span ${room.colSpan}`,\n                              gridRow: `${room.row + 1} / span ${room.rowSpan}`,\n                              padding: \"4px\",\n                              textAlign: \"center\",\n                              borderRadius: \"4px\",\n                              color: \"#fff\",\n                              background: isUsed ? \"#888888\" : getRoomColor(room.roomType || \"1인실\"),\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              justifyContent: \"center\",\n                              cursor: isUsed ? \"not-allowed\" : \"pointer\",\n                              opacity: isUsed ? 0.6 : 1,\n                            }}\n                          >\n                            {room.roomType || \"1인실\"}\n                          </div>\n                        );\n                      }\n                      return (\n                        <div\n                          key={`cell-${section}-${col}-${row}`}\n                          style={{\n                            gridColumn: `${col + 1} / span 1`,\n                            gridRow: `${row + 1} / span 1`,\n                            padding: \"4px\",\n                            textAlign: \"center\",\n                            borderRadius: \"4px\",\n                            color: \"#fff\",\n                            background: isUsed ? \"#888888\" : isSelected ? \"#90cdf4\" : isOccupied ? \"#e5e7eb\" : \"#e5e7eb\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                            cursor: isUsed || isOccupied ? \"not-allowed\" : \"pointer\",\n                            opacity: isUsed || isOccupied ? 0.6 : 1,\n                          }}\n                          onMouseDown={() => !isUsed && !isOccupied && handleMouseDown(section, col, row)}\n                          onMouseOver={() => !isUsed && !isOccupied && handleMouseOver(col, row)}\n                        >\n                          {isUsed ? \"사용 중\" : isOccupied ? \"\" : \"빈 공간\"}\n                        </div>\n                      );\n                    })}\n                    <p style={{ marginTop: \"0.5rem\", fontSize: \"0.9rem\", color: \"#374151\" }}>\n                      총 크기: {sectionLayout[selectedFloor]?.[section]?.reduce((sum, r) => sum + (roomSizeMap[r || \"1인실\"] || 0), 0) || 0}{\" \"}\n                      / 8\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      <CommonPopup show={showAddPopup} onHide={handleAddCancel} onConfirm={handleAddConfirm} title=\"레이아웃 추가\">\n        <div className=\"mb-3\">\n          <label className=\"form-label\">층 ID</label>\n          <input\n            type=\"text\"\n            className={`form-control ${styles.formControl}`}\n            placeholder=\"층 ID 입력 (예: 1F)\"\n            value={newRowData.FLOOR_ID}\n            onChange={(e) => setNewRowData({ ...newRowData, FLOOR_ID: e.target.value })}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"form-label\">섹션</label>\n          <select\n            className={`form-select ${styles.formSelect}`}\n            value={newRowData.SECTION}\n            onChange={(e) => setNewRowData({ ...newRowData, SECTION: e.target.value })}\n          >\n            <option value=\"\">섹션 선택</option>\n            <option value=\"A\">A</option>\n            <option value=\"B\">B</option>\n            <option value=\"C\">C</option>\n          </select>\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"form-label\">호실 유형</label>\n          <select\n            className={`form-select ${styles.formSelect}`}\n            value={newRowData.ROOM_TYPE}\n            onChange={(e) => setNewRowData({ ...newRowData, ROOM_TYPE: e.target.value })}\n          >\n            <option value=\"1인실\">1인실</option>\n            <option value=\"2인실\">2인실</option>\n            <option value=\"4인실\">4인실</option>\n            <option value=\"8인실\">8인실</option>\n          </select>\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"form-label\">호실 가격</label>\n          <input\n            type=\"number\"\n            className={`form-control ${styles.formControl}`}\n            placeholder=\"호실 가격 입력\"\n            min=\"0\"\n            value={newRowData.PRICE}\n            onChange={(e) => setNewRowData({ ...newRowData, PRICE: parseInt(e.target.value) || 0 })}\n          />\n        </div>\n      </CommonPopup>\n    </div>\n  );\n};\n\n// 호실 유형에 따른 색상 반환\nconst getRoomColor = (roomType) => {\n  // 호실 유형별 색상 반환\n  switch (roomType) {\n    case \"1인실\":\n      return \"#3498db\";\n    case \"2인실\":\n      return \"#e74c3c\";\n    case \"4인실\":\n      return \"#2ecc71\";\n    case \"8인실\":\n      return \"#FF6B35\";\n    default:\n      return \"#e5e7eb\";\n  }\n};\n\nexport default ReservationAdminPage;"],"names":["fn_CellText","fn_CellNumber","fn_CellSelect","values","fn_CellButton","label","className","onClick","cell","button","fn_HandleCellEdit","field","setData","tableInstance","rowId","newValue","prevData","row","updatedRow","getFieldOptions","fieldId","roomSizeMap","calculateSpan","roomType","size","ReservationAdminPage","user","useStore","navigate","useNavigate","searchConfig","hasPermission","filterTableFields","filters","setFilters","useState","initialFilters","area","tableFilters","setTableFilters","loading","setLoading","data","isSearched","setIsSearched","tableStatus","setTableStatus","showAddPopup","setShowAddPopup","imsiCounter","setImsiCounter","rowCount","setRowCount","floors","setFloors","selectedFloor","setSelectedFloor","sectionLayout","setSectionLayout","gridLayout","setGridLayout","tableRef","useRef","isInitialRender","newRowData","setNewRowData","dragState","setDragState","newFloorInput","setNewFloorInput","columns","styles","rowData","handleDelete","stateField","div","checkbox","span","loadData","params","response","fetchData","api","common","errorMsgPopup","responseData","item","uniqueFloors","initialLayout","acc","floor","initialGrid","validRoomType","colSpan","rowSpan","err","useEffect","resolve","createTable","el","table","filterSelect","filterText","startCell","endCell","section","colStart","colEnd","rowStart","rowEnd","prev","_b","_a","handleDynamicEvent","eventType","handleAddClick","handleAddConfirm","totalSize","sum","newSize","existingIndexes","newRoomIndex","newRoomId","newRow","handleAddCancel","r","_","i","handleAddFloor","msgPopup","handleDeleteFloor","newLayout","handleMouseDown","col","handleMouseOver","handleMouseUp","adjustedColSpan","adjustedRowSpan","currentSize","_d","_c","itemColEnd","itemRowEnd","handleSaveLayout","changedRows","sections","floorIds","floorId","sectionData","p_GUBUN","jsxs","jsx","MainSearch","TableSearch","handleDownloadExcel","index","isSelected","_e","_f","_g","_h","room","_j","_i","isUsed","isOccupied","_l","_k","getRoomColor","CommonPopup"],"mappings":"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"}